=========================
ES-SIMD Testing Framework
=========================

Regression Test
---------------

To run the regression test, use the following command in the build directory:

.. code-block:: bash

   make check

Specifying a Test Case
~~~~~~~~~~~~~~~~~~~~~~

A test case is specified by comment lines in any file with name ends with ``.s``
in the ``test`` folder in the project source tree. For example:

.. code-block:: python
   
   ###BEGIN: dangling separator
   ###TOOL: path of the tool to be tested
   ###ARGS: command line arguments for running the tools
   ###ERR: expected string in stderr, multiple lines allowed
   ###OUT: expected string in stdout, multiple lines allowed
   ###OFILE: name of output file, multiple lines allowed
   ###MDUMP: name of memory dump file, miltiple lines allowed
   ###END:

Each case is specified by lines between ``###BEGIN:`` and ``###END:``.
In general, it is possible to specify *multiple* test cases in one file.

Some predefined variables can be used. The format is ${VAR}. Available special
variables are listed in the following table:

============= =======================================
 Variable                      Value
============= =======================================
  S_CG         Path to code generator (s-cg)
  S_AS         Path to assembler executable (s-as)
  S_SIM        Path to simulator executable (s-sim)
  S_CC         Path to compiler driver (s-cc)
  FILE         Path to current test file
 FILEDIR       Path to current test file directory
 SOLVER_ROOT   Path to Solver target root directory
============= =======================================

For each test case, the test driver runs the command sequences defined in the
specification. Each command is specified by a tuple
``(TOOL, ARGS, ERR, OUT, OFILE, MDUMP)``. When there are multiple commands,
the test driver runs them *in the same order as they are specified*.
For each command, the test driver runs the tool with given arguments and checks:

- If all expected *stdout* and/or *stderr* string found in corresponding output.
- If **NO** expected output string is specified, the corresponding output should
  be **empty**.
- For each specified output file, the tool should produce a file that contains
  *the same text content* as the reference file.
- For each specified memory dump file, the tool should produce the dumps that
  contains *the same value* as the reference files. Note that the test driver
  only checks the locations specified in the reference file.

Note: for *OFILE* and *MDUMP*, there are two ways to specify the file name:

1. Just one file name *f*. The test driver assumes that:

   - the tool produces an output file named *f*, and
   - there is a reference file name *f.ref* in the test file directory.

2. Two file names *f:ref*. The test driver assumes that:
   
   - the tool produces an output file named *f*, and
   - there is a reference file name *ref* in the test file directory.

The test driver stops and reports error if *any* of the specified command fails.

Testing with RTL Simulation
~~~~~~~~~~~~~~~~~~~~~~~~~~~

`Modelsim <http://www.mentor.com/products/fpga/model>`_ or
`Icarus Verilog <http://iverilog.icarus.com/>`_ is required to run the RTL
simulation.

An RTL test case can be specified in a similar way as a tool test case. The only
difference is that instead of specifying the command using the ``###TOOL:``
directive, the ``###RTL:`` directive is used:

.. code-block:: python

   ###RTL: binary_archive.zip processor_config.json path_to_RTL_root

The ``binary_archive.zip`` should be an archive file compatible with the one
generated by :doc:`s-cc <ToolGuide/s-cc>`.

Testing with a Memory Checker
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Currently the toolflow supports running the non-RTL test cases with
`Valgrind <http://valgrind.org/>`_. What you need to do is to run:

.. code-block:: bash

   make memcheck

The test driver runs valgrind in quiet mode. If there is any error, you will
see the message output provided by Valgrind.

NOTE: runnning test with Valgrind is **significantly slower** than normal test
run (often >100x slower). And it consumes a lot of resources.
So be prepared when you actually want to do it.

Unit Test
---------

The `Google C++ Testing Framework <https://code.google.com/p/googletest/>`_ is
used to perform unit-testing on the code.

To run the unit test, use the following command in the build directory:

.. code-block:: bash

   make unittest
