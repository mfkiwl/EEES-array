cmake_minimum_required(VERSION 2.6)

IF(POLICY CMP0017)
  CMAKE_POLICY(SET CMP0017 OLD)
ENDIF()

PROJECT(SIMD-TOOLCHAIN)

SET(CMAKE_MODULE_PATH ${CMAKE_ROOT}/Modules ${CMAKE_SOURCE_DIR}/cmake)

INCLUDE(FindPythonInterp)
INCLUDE(CTest)
INCLUDE(ES-SIMDModules)
INCLUDE(FindPyLibs)

IF(NOT PYTHONLIBS_FOUND)
    MESSAGE(FATAL_ERROR  "Python library not found")
ENDIF(NOT PYTHONLIBS_FOUND)

FIND_PYTHON_MODULE(jinja2 REQUIRED)
FIND_PYTHON_MODULE(sphinx)
FIND_PACKAGE(Sphinx)
FIND_PACKAGE(IcarusVerilog)
FIND_PACKAGE(Doxygen)

FIND_PACKAGE(LLVM REQUIRED)
ADD_DEFINITIONS(${LLVM_DEFINITIONS})
INCLUDE_DIRECTORIES(${LLVM_INCLUDE_DIRS})
LINK_DIRECTORIES(${LLVM_LIBRARY_DIRS})

FIND_PACKAGE(Lemon REQUIRED)
INCLUDE_DIRECTORIES(${LEMON_INCLUDE_DIR})

LIST(APPEND es_simd_system_libs ${LLVM_SYS_LIBS})

INCLUDE_DIRECTORIES(${SIMD-TOOLCHAIN_SOURCE_DIR}/include)
INCLUDE_DIRECTORIES(${SIMD-TOOLCHAIN_SOURCE_DIR}/extra/jsoncpp)

IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE Debug)
ENDIF(NOT CMAKE_BUILD_TYPE)

IF (SOLVER_ADDRESSSANITIZER_BUILD)
    SET(CMAKE_BUILD_TYPE Debug)
    SET(CMAKE_CXX_FLAGS "-g -fsanitize=address -fno-omit-frame-pointer ${CMAKE_CXX_FLAGS}")
    SET(CMAKE_C_FLAGS "-g -fsanitize=address -fno-omit-frame-pointer ${CMAKE_C_FLAGS}")
ENDIF (SOLVER_ADDRESSSANITIZER_BUILD)

SET(CMAKE_CXX_FLAGS "-Wall -Wextra -Wno-unused-parameter -Wunused-function -fvisibility-inlines-hidden ${LLVM_CXXFLAGS} ${CMAKE_CXX_FLAGS}")
SET(CMAKE_EXE_LINKER_FLAGS ${LLVM_LDFLAGS})

IF(${CMAKE_BUILD_TYPE} EQUAL Debug)
  SET(CMAKE_EXE_LINKER_FLAGS "-rdynamic ${CMAKE_EXE_LINKER_FLAGS}")
ENDIF (${CMAKE_BUILD_TYPE} EQUAL Debug)

FIND_PROGRAM(MODELSIM vsim CACHE DOC "Modelsim executable")
IF(NOT MODELSIM)
  IF(NOT ICARUSVERILOG_FOUND)
    MESSAGE(STATUS
      "Modelsim or Icarus Verilog not found, disabling RTL simulation")
    UNSET(RTL_FLOW)
  ELSE(NOT ICARUSVERILOG_FOUND)
    SET(RTL_FLOW iverilog)
  ENDIF(NOT ICARUSVERILOG_FOUND)
ELSE(NOT MODELSIM)
    MESSAGE(STATUS "Modelsim found in ${MODELSIM}")
    IF(NOT RTL_FLOW)
      SET(RTL_FLOW vsim)
    ENDIF(NOT RTL_FLOW)
ENDIF(NOT MODELSIM)

IF (${RTL_FLOW} EQUAL vsim)
  SET(SIM_CC   ${MODELSIM})
  SET(SIM_EXE  ${MODELSIM})
ELSEIF(${RTL_FLOW} EQUAL iverilog)
  SET(SIM_CC   ${MODELSIM})
  SET(SIM_EXE  ${MODELSIM})
ENDIF(${RTL_FLOW} EQUAL vsim)


SET(EXECUTABLE_OUTPUT_PATH ${SIMD-TOOLCHAIN_BINARY_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${SIMD-TOOLCHAIN_BINARY_DIR}/lib)

# use, i.e. don't skip the full RPATH for the build tree
SET(CMAKE_SKIP_BUILD_RPATH  FALSE)

# when building, don't use the install RPATH already
# (but later on when installing)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)

SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")

# add the automatically determined parts of the RPATH
# which point to directories outside the build tree to the install RPATH
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)


# the RPATH to be used when installing, but only if it's not a system directory
LIST(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${CMAKE_INSTALL_PREFIX}/lib" isSystemDir)
IF("${isSystemDir}" STREQUAL "-1")
   SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
ENDIF("${isSystemDir}" STREQUAL "-1")

IF(APPLE)
  SET(CMAKE_INSTALL_NAME_DIR "@executable_path/../lib")
ENDIF(APPLE)

INCLUDE(ES-SIMD-Config)

INCLUDE_DIRECTORIES(${SIMD-TOOLCHAIN_BINARY_DIR}/include)

ENABLE_TESTING()
ADD_SUBDIRECTORY(lib)

ADD_SUBDIRECTORY(tools)
GET_DIRECTORY_PROPERTY(ES_SIMD_TOOL_LIST DIRECTORY tools DEFINITION ES_SIMD_TOOL_LIST)

ADD_CUSTOM_TARGET(check-all)

ADD_SUBDIRECTORY(scripts)
ADD_SUBDIRECTORY(extra/gtest)
ADD_SUBDIRECTORY(extra/jsoncpp)
ADD_SUBDIRECTORY(test)
ADD_SUBDIRECTORY(benchmark)
ADD_SUBDIRECTORY(solver)
ADD_SUBDIRECTORY(unittest)
ADD_SUBDIRECTORY(py-binding)
IF(SPHINX_FOUND)
  MESSAGE(STATUS "Building documentation")
  ADD_SUBDIRECTORY(docs)
ENDIF(SPHINX_FOUND)
