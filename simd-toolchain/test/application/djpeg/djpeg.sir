###BEGIN: JPEG decoder 4 stage bypass
###TOOL: ${S_CC}
###ARGS: ${FILE} -o djpeg-4-b --arch-cfg ${SOLVER_ROOT}/arch/baseline-32b-4stage-bypass.json --arch-param cp-dmem-depth:8192
###TOOL: ${S_RUN_SIM}
###ARGS: djpeg-4-b.zip --arch-cfg ${SOLVER_ROOT}/arch/baseline-32b-4stage-bypass.json --arch-param cp-dmem-depth:8192 --cp-dbin input_buffer:${FILEDIR}/surfer.jpg --dump-dmem --sim-dir djpeg-4-b-out
###MDUMP: djpeg-4-b-out/dump/dmem.baseline.scalar.dump:framebuffer.ref
###END:

###BEGIN: JPEG decoder 4 stage
###TOOL: ${S_CC}
###ARGS: ${FILE} -o djpeg-4 --arch-cfg ${SOLVER_ROOT}/arch/baseline-32b-4stage.json --arch-param cp-dmem-depth:8192
###TOOL: ${S_RUN_SIM}
###ARGS: djpeg-4.zip --arch-cfg ${SOLVER_ROOT}/arch/baseline-32b-4stage.json --arch-param cp-dmem-depth:8192 --cp-dbin input_buffer:${FILEDIR}/surfer.jpg --dump-dmem --sim-dir djpeg-4-out
###MDUMP: djpeg-4-out/dump/dmem.baseline.scalar.dump:framebuffer.ref
###END:

###BEGIN: JPEG decoder 5 stage bypass
###TOOL: ${S_CC}
###ARGS: ${FILE} -o djpeg-5-b --arch-cfg ${SOLVER_ROOT}/arch/baseline-32b-5stage-bypass.json --arch-param cp-dmem-depth:8192
###TOOL: ${S_RUN_SIM}
###ARGS: djpeg-5-b.zip --arch-cfg ${SOLVER_ROOT}/arch/baseline-32b-5stage-bypass.json --arch-param cp-dmem-depth:8192 --cp-dbin input_buffer:${FILEDIR}/surfer.jpg --dump-dmem --sim-dir djpeg-5-b-out
###MDUMP: djpeg-5-b-out/dump/dmem.baseline.scalar.dump:framebuffer.ref
###END:

###BEGIN: JPEG decoder 5 stage
###TOOL: ${S_CC}
###ARGS: ${FILE} -o djpeg-5 --arch-cfg ${SOLVER_ROOT}/arch/baseline-32b-5stage.json --arch-param cp-dmem-depth:8192
###TOOL: ${S_RUN_SIM}
###ARGS: djpeg-5.zip --arch-cfg ${SOLVER_ROOT}/arch/baseline-32b-5stage.json --arch-param cp-dmem-depth:8192 --cp-dbin input_buffer:${FILEDIR}/surfer.jpg --dump-dmem --sim-dir djpeg-5-out
###MDUMP: djpeg-5-out/dump/dmem.baseline.scalar.dump:framebuffer.ref
###END:
        .text
	.globl	color_conversion
	.align	2
	.type	color_conversion,@function
	.ent       color_conversion     # @color_conversion
color_conversion:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       0
	mnum       28
	malias     26, 28
	malias     26, 27
	malias     25, 26
	malias     24, 28
	malias     24, 27
	malias     24, 26
	malias     24, 25
	malias     23, 26
	malias     23, 25
	malias     23, 24
	malias     22, 28
	malias     22, 27
	malias     22, 26
	malias     22, 25
	malias     22, 24
	malias     22, 23
	malias     21, 26
	malias     21, 25
	malias     21, 24
	malias     21, 23
	malias     21, 22
	malias     20, 28
	malias     20, 27
	malias     20, 26
	malias     20, 25
	malias     20, 24
	malias     20, 23
	malias     20, 22
	malias     20, 21
	malias     19, 26
	malias     19, 24
	malias     19, 22
	malias     19, 20
	malias     18, 26
	malias     18, 24
	malias     18, 22
	malias     18, 20
	malias     17, 28
	malias     17, 27
	malias     17, 26
	malias     17, 25
	malias     17, 24
	malias     17, 23
	malias     17, 22
	malias     17, 21
	malias     17, 20
	malias     17, 19
	malias     17, 18
	malias     16, 26
	malias     16, 24
	malias     16, 22
	malias     16, 20
	malias     16, 19
	malias     16, 17
	malias     15, 26
	malias     15, 24
	malias     15, 22
	malias     15, 20
	malias     15, 17
	malias     14, 28
	malias     14, 27
	malias     14, 26
	malias     14, 25
	malias     14, 24
	malias     14, 23
	malias     14, 22
	malias     14, 21
	malias     14, 20
	malias     14, 19
	malias     14, 18
	malias     14, 17
	malias     14, 16
	malias     14, 15
	malias     13, 26
	malias     13, 24
	malias     13, 22
	malias     13, 20
	malias     13, 19
	malias     13, 17
	malias     13, 16
	malias     13, 14
	malias     12, 26
	malias     12, 24
	malias     12, 22
	malias     12, 20
	malias     12, 17
	malias     12, 14
	malias     11, 26
	malias     11, 24
	malias     11, 22
	malias     11, 20
	malias     11, 17
	malias     11, 14
	malias     10, 26
	malias     10, 24
	malias     10, 22
	malias     10, 20
	malias     10, 17
	malias     10, 14
	malias     9, 26
	malias     9, 24
	malias     9, 22
	malias     9, 20
	malias     9, 17
	malias     9, 14
	malias     8, 26
	malias     8, 24
	malias     8, 22
	malias     8, 20
	malias     8, 17
	malias     8, 14
	malias     7, 26
	malias     7, 24
	malias     7, 22
	malias     7, 20
	malias     7, 17
	malias     7, 14
	malias     6, 26
	malias     6, 24
	malias     6, 22
	malias     6, 20
	malias     6, 17
	malias     6, 14
	malias     5, 26
	malias     5, 24
	malias     5, 22
	malias     5, 20
	malias     5, 17
	malias     5, 14
	malias     4, 26
	malias     4, 24
	malias     4, 22
	malias     4, 20
	malias     4, 17
	malias     4, 14
	malias     3, 26
	malias     3, 24
	malias     3, 22
	malias     3, 20
	malias     3, 17
	malias     3, 14
	malias     2, 27
	malias     2, 26
	malias     2, 24
	malias     2, 22
	malias     2, 20
	malias     2, 17
	malias     2, 14
	malias     1, 28
	malias     1, 26
	malias     1, 24
	malias     1, 22
	malias     1, 20
	malias     1, 17
	malias     1, 14
	bb         0
	succ       13
	succ       1
	dom        13
	dom        1
	mov        %r0, MCU_sy
	mloc       1
	lw         %r2, %r0, 0
	brlt       %r2, 1, ($BB0_13)
# BB#1:                                 # %for.body.lr.ph
	bb         1
	pred       0
	succ       2
	dom        2
	rli        %r2
	mov        %r0, MCU_sx
	mloc       2
	lw         %r10, %r0, 0
	mov        %r0, %ZERO
	mov        %r1, %ZERO
$BB0_2:                                 # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB0_4 Depth 2
	bb         2
	loop       0
	lhdr       0, 1
	pred       12
	pred       1
	succ       12
	succ       3
	dom        12
	dom        3
	pdom       1
	rli        %r1
	rli        %r10
	rli        %r2
	rli        %r0
	brlt       %r10, 1, ($BB0_12)
# BB#3:                                 # %for.body24.preheader
                                        #   in Loop: Header=BB0_2 Depth=1
	bb         3
	loop       0
	pred       2
	succ       4
	dom        4
	rli        %r1
	rli        %r10
	rli        %r0
	mov        %r4, comp
	mloc       3
	lb         %r2, %r4, 37
	sra        %r5, %r1, %r2
	sra        %r2, %r5, 3
	mloc       4
	lb         %r3, %r4, 34
	mul        %r2, %r3, %r2
	mloc       5
	lb         %r3, %r4, 33
	add        %r2, %r2, %r3
	mloc       6
	lb         %r3, %r4, 21
	sra        %r6, %r1, %r3
	sra        %r3, %r6, 3
	mloc       7
	lb         %r7, %r4, 18
	mul        %r3, %r7, %r3
	mloc       8
	lb         %r7, %r4, 17
	add        %r3, %r3, %r7
	mloc       9
	lb         %r7, %r4, 5
	sra        %r7, %r1, %r7
	sra        %r8, %r7, 3
	mloc       10
	lb         %r9, %r4, 2
	mul        %r8, %r9, %r8
	mloc       11
	lb         %r4, %r4, 1
	add        %r4, %r8, %r4
	and        %r5, %r5, 7
	and        %r6, %r6, 7
	and        %r7, %r7, 7
	mul        %r8, %r10, %r0
	mov        %r9, %ZERO
$BB0_4:                                 # %for.body24
                                        #   Parent Loop BB0_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	bb         4
	loop       1
	lhdr       1, 2
	loop       0
	pred       10
	pred       3
	succ       6
	succ       5
	dom        6
	dom        5
	pdom       3
	rli        %r9
	rli        %r1
	rli        %r0
	rli        %r8
	rli        %r5
	rli        %r6
	rli        %r7
	rli        %r2
	rli        %r3
	rli        %r4
	mov        %r12, comp
	mloc       12
	lb         %r10, %r12, 4
	sra        %r10, %r9, %r10
	sra        %r11, %r10, 3
	add        %r11, %r4, %r11
	sll        %r11, %r11, 2
	mov        %r13, MCU_buff
	mloc       13
	lw         %r11, %r13, %r11
	sll        %r14, %r7, 3
	add        %r11, %r11, %r14
	and        %r10, %r10, 7
	mloc       14
	lb         %r10, %r11, %r10
	mloc       15
	lb         %r11, %r12, 20
	sra        %r11, %r9, %r11
	sra        %r14, %r11, 3
	add        %r14, %r3, %r14
	sll        %r14, %r14, 2
	mloc       16
	lw         %r14, %r13, %r14
	sll        %r15, %r6, 3
	add        %r14, %r14, %r15
	and        %r11, %r11, 7
	mloc       17
	lb         %r11, %r14, %r11
	add        %r14, %r11, -128
	mul        %r11, %r14, 227
	sra        %r11, %r11, 7
	mloc       18
	lb         %r12, %r12, 36
	sra        %r12, %r9, %r12
	sra        %r15, %r12, 3
	add        %r15, %r2, %r15
	sll        %r15, %r15, 2
	mloc       19
	lw         %r13, %r13, %r15
	sll        %r15, %r5, 3
	add        %r13, %r13, %r15
	and        %r12, %r12, 7
	mloc       20
	lb         %r12, %r13, %r12
	add        %r12, %r12, -128
	mul        %r13, %r12, 359
	sra        %r13, %r13, 8
	add        %r13, %r13, %r10
	mul        %r14, %r14, 11
	sra        %r14, %r14, 5
	sub       %r14, %r10, %r14
	mul        %r12, %r12, 183
	sra        %r12, %r12, 8
	sub       %r12, %r14, %r12
	mov        %r14, %ZERO
	brlt       %r13, 1, ($BB0_6)
# BB#5:                                 # %cond.true
                                        #   in Loop: Header=BB0_4 Depth=2
	bb         5
	loop       1
	loop       0
	pred       4
	succ       6
	rli        %r9
	rli        %r1
	rli        %r0
	rli        %r11
	rli        %r10
	rli        %r12
	rli        %r13
	rli        %r8
	rli        %r5
	rli        %r6
	rli        %r7
	rli        %r2
	rli        %r3
	rli        %r4
	sel_lt     %r14, %r13, 255, %r13, -1
$BB0_6:                                 # %cond.end76
                                        #   in Loop: Header=BB0_4 Depth=2
	bb         6
	loop       1
	loop       0
	pred       5
	pred       4
	succ       8
	succ       7
	dom        8
	dom        7
	pdom       5
	pdom       4
	rli        %r14
	rli        %r9
	rli        %r1
	rli        %r0
	rli        %r11
	rli        %r10
	rli        %r12
	rli        %r8
	rli        %r5
	rli        %r6
	rli        %r7
	rli        %r2
	rli        %r3
	rli        %r4
	add        %r10, %r11, %r10
	mov        %r11, ColorBuffer
	mloc       21
	lw         %r13, %r11, 0
	add        %r15, %r13, %r8
	mul        %r13, %r9, 3
	add        %r15, %r15, %r13
	mloc       22
	sb         %r14, %r15, 2
	mov        %r14, %ZERO
	brlt       %r12, 1, ($BB0_8)
# BB#7:                                 # %cond.true83
                                        #   in Loop: Header=BB0_4 Depth=2
	bb         7
	loop       1
	loop       0
	pred       6
	succ       8
	rli        %r9
	rli        %r1
	rli        %r0
	rli        %r13
	rli        %r11
	rli        %r10
	rli        %r12
	rli        %r8
	rli        %r5
	rli        %r6
	rli        %r7
	rli        %r2
	rli        %r3
	rli        %r4
	sel_lt     %r14, %r12, 255, %r12, -1
$BB0_8:                                 # %cond.end91
                                        #   in Loop: Header=BB0_4 Depth=2
	bb         8
	loop       1
	loop       0
	pred       7
	pred       6
	succ       10
	succ       9
	dom        10
	dom        9
	pdom       7
	pdom       6
	rli        %r14
	rli        %r9
	rli        %r1
	rli        %r0
	rli        %r13
	rli        %r11
	rli        %r10
	rli        %r8
	rli        %r5
	rli        %r6
	rli        %r7
	rli        %r2
	rli        %r3
	rli        %r4
	mloc       23
	lw         %r11, %r11, 0
	add        %r11, %r11, %r8
	add        %r11, %r11, %r13
	mloc       24
	sb         %r14, %r11, 1
	mov        %r11, %ZERO
	brlt       %r10, 1, ($BB0_10)
# BB#9:                                 # %cond.true98
                                        #   in Loop: Header=BB0_4 Depth=2
	bb         9
	loop       1
	loop       0
	pred       8
	succ       10
	rli        %r9
	rli        %r1
	rli        %r0
	rli        %r10
	rli        %r8
	rli        %r5
	rli        %r6
	rli        %r7
	rli        %r2
	rli        %r3
	rli        %r4
	sel_lt     %r11, %r10, 255, %r10, -1
$BB0_10:                                # %cond.end106
                                        #   in Loop: Header=BB0_4 Depth=2
	bb         10
	loop       1
	lext       1
	loop       0
	pred       9
	pred       8
	succ       11
	succ       4
	dom        11
	pdom       9
	pdom       8
	rli        %r11
	rli        %r9
	rli        %r1
	rli        %r0
	rli        %r8
	rli        %r5
	rli        %r6
	rli        %r7
	rli        %r2
	rli        %r3
	rli        %r4
	mov        %r10, ColorBuffer
	mloc       25
	lw         %r10, %r10, 0
	add        %r10, %r10, %r8
	mul        %r12, %r9, 3
	mloc       26
	sb         %r11, %r10, %r12
	add        %r9, %r9, 1
	mov        %r10, MCU_sx
	mloc       27
	lw         %r10, %r10, 0
	brlt       %r9, %r10, ($BB0_4)
# BB#11:                                # %for.cond21.for.inc111_crit_edge
                                        #   in Loop: Header=BB0_2 Depth=1
	bb         11
	loop       0
	pred       10
	succ       12
	pdom       10
	rli        %r1
	rli        %r10
	rli        %r0
	mov        %r2, MCU_sy
	mloc       28
	lw         %r2, %r2, 0
$BB0_12:                                # %for.inc111
                                        #   in Loop: Header=BB0_2 Depth=1
	bb         12
	loop       0
	lext       0
	pred       2
	pred       11
	succ       13
	succ       2
	pdom       2
	pdom       11
	rli        %r1
	rli        %r10
	rli        %r2
	rli        %r0
	add        %r0, %r0, 3
	add        %r1, %r1, 1
	brlt       %r1, %r2, ($BB0_2)
$BB0_13:                                # %for.end113
	bb         13
	pred       12
	pred       0
	pdom       12
	pdom       0
	ret        %RA
	.end       color_conversion
$tmp0:
	.size	color_conversion, ($tmp0)-color_conversion

	.globl	IDCT
	.align	2
	.type	IDCT,@function
	.ent       IDCT                 # @IDCT
IDCT:
	.frame     %SP,256
# BB#0:                                 # %entry
	args       2
	mnum       47
	malias     39, 47
	malias     39, 46
	malias     39, 45
	malias     39, 44
	malias     39, 43
	malias     39, 42
	malias     39, 41
	malias     39, 40
	malias     38, 47
	malias     38, 46
	malias     38, 45
	malias     38, 44
	malias     38, 43
	malias     38, 42
	malias     38, 41
	malias     38, 40
	malias     38, 39
	malias     37, 47
	malias     37, 46
	malias     37, 45
	malias     37, 44
	malias     37, 43
	malias     37, 42
	malias     37, 41
	malias     37, 40
	malias     37, 39
	malias     37, 38
	malias     36, 47
	malias     36, 46
	malias     36, 45
	malias     36, 44
	malias     36, 43
	malias     36, 42
	malias     36, 41
	malias     36, 40
	malias     36, 39
	malias     36, 38
	malias     36, 37
	malias     35, 47
	malias     35, 46
	malias     35, 45
	malias     35, 44
	malias     35, 43
	malias     35, 42
	malias     35, 41
	malias     35, 40
	malias     35, 39
	malias     35, 38
	malias     35, 37
	malias     35, 36
	malias     34, 47
	malias     34, 46
	malias     34, 45
	malias     34, 44
	malias     34, 43
	malias     34, 42
	malias     34, 41
	malias     34, 40
	malias     34, 39
	malias     34, 38
	malias     34, 37
	malias     34, 36
	malias     34, 35
	malias     33, 47
	malias     33, 46
	malias     33, 45
	malias     33, 44
	malias     33, 43
	malias     33, 42
	malias     33, 41
	malias     33, 40
	malias     33, 39
	malias     33, 38
	malias     33, 37
	malias     33, 36
	malias     33, 35
	malias     33, 34
	malias     32, 47
	malias     32, 46
	malias     32, 45
	malias     32, 44
	malias     32, 43
	malias     32, 42
	malias     32, 41
	malias     32, 40
	malias     32, 39
	malias     32, 38
	malias     32, 37
	malias     32, 36
	malias     32, 35
	malias     32, 34
	malias     32, 33
	malias     31, 47
	malias     31, 46
	malias     31, 45
	malias     31, 44
	malias     31, 43
	malias     31, 42
	malias     31, 41
	malias     31, 40
	malias     31, 39
	malias     31, 38
	malias     31, 37
	malias     31, 36
	malias     31, 35
	malias     31, 34
	malias     31, 33
	malias     31, 32
	malias     30, 47
	malias     30, 46
	malias     30, 45
	malias     30, 44
	malias     30, 43
	malias     30, 42
	malias     30, 41
	malias     30, 40
	malias     30, 39
	malias     30, 38
	malias     30, 37
	malias     30, 36
	malias     30, 35
	malias     30, 34
	malias     30, 33
	malias     30, 32
	malias     30, 31
	malias     29, 47
	malias     29, 46
	malias     29, 45
	malias     29, 44
	malias     29, 43
	malias     29, 42
	malias     29, 41
	malias     29, 40
	malias     29, 39
	malias     29, 38
	malias     29, 37
	malias     29, 36
	malias     29, 35
	malias     29, 34
	malias     29, 33
	malias     29, 32
	malias     29, 31
	malias     29, 30
	malias     28, 47
	malias     28, 46
	malias     28, 45
	malias     28, 44
	malias     28, 43
	malias     28, 42
	malias     28, 41
	malias     28, 40
	malias     28, 39
	malias     28, 38
	malias     28, 37
	malias     28, 36
	malias     28, 35
	malias     28, 34
	malias     28, 33
	malias     28, 32
	malias     28, 31
	malias     28, 30
	malias     28, 29
	malias     27, 47
	malias     27, 46
	malias     27, 45
	malias     27, 44
	malias     27, 43
	malias     27, 42
	malias     27, 41
	malias     27, 40
	malias     27, 39
	malias     27, 38
	malias     27, 37
	malias     27, 36
	malias     27, 35
	malias     27, 34
	malias     27, 33
	malias     27, 32
	malias     27, 31
	malias     27, 30
	malias     27, 29
	malias     27, 28
	malias     26, 47
	malias     26, 46
	malias     26, 45
	malias     26, 44
	malias     26, 43
	malias     26, 42
	malias     26, 41
	malias     26, 40
	malias     26, 39
	malias     26, 38
	malias     26, 37
	malias     26, 36
	malias     26, 35
	malias     26, 34
	malias     26, 33
	malias     26, 32
	malias     26, 31
	malias     26, 30
	malias     26, 29
	malias     26, 28
	malias     26, 27
	malias     25, 47
	malias     25, 46
	malias     25, 45
	malias     25, 44
	malias     25, 43
	malias     25, 42
	malias     25, 41
	malias     25, 40
	malias     25, 39
	malias     25, 38
	malias     25, 37
	malias     25, 36
	malias     25, 35
	malias     25, 34
	malias     25, 33
	malias     25, 32
	malias     25, 31
	malias     25, 30
	malias     25, 29
	malias     25, 28
	malias     25, 27
	malias     25, 26
	malias     24, 47
	malias     24, 46
	malias     24, 45
	malias     24, 44
	malias     24, 43
	malias     24, 42
	malias     24, 41
	malias     24, 40
	malias     24, 39
	malias     24, 38
	malias     24, 37
	malias     24, 36
	malias     24, 35
	malias     24, 34
	malias     24, 33
	malias     24, 32
	malias     24, 31
	malias     24, 30
	malias     24, 29
	malias     24, 28
	malias     24, 27
	malias     24, 26
	malias     24, 25
	malias     23, 47
	malias     23, 46
	malias     23, 45
	malias     23, 44
	malias     23, 43
	malias     23, 42
	malias     23, 41
	malias     23, 40
	malias     23, 39
	malias     23, 38
	malias     23, 37
	malias     23, 36
	malias     23, 35
	malias     23, 34
	malias     23, 33
	malias     23, 32
	malias     23, 31
	malias     23, 30
	malias     23, 29
	malias     23, 28
	malias     23, 27
	malias     23, 26
	malias     23, 25
	malias     23, 24
	malias     22, 47
	malias     22, 46
	malias     22, 45
	malias     22, 44
	malias     22, 43
	malias     22, 42
	malias     22, 41
	malias     22, 40
	malias     22, 39
	malias     22, 38
	malias     22, 37
	malias     22, 36
	malias     22, 35
	malias     22, 34
	malias     22, 33
	malias     22, 32
	malias     22, 31
	malias     22, 30
	malias     22, 29
	malias     22, 28
	malias     22, 27
	malias     22, 26
	malias     22, 25
	malias     22, 24
	malias     22, 23
	malias     21, 47
	malias     21, 46
	malias     21, 45
	malias     21, 44
	malias     21, 43
	malias     21, 42
	malias     21, 41
	malias     21, 40
	malias     21, 39
	malias     21, 38
	malias     21, 37
	malias     21, 36
	malias     21, 35
	malias     21, 34
	malias     21, 33
	malias     21, 32
	malias     21, 31
	malias     21, 30
	malias     21, 29
	malias     21, 28
	malias     21, 27
	malias     21, 26
	malias     21, 25
	malias     21, 24
	malias     21, 23
	malias     21, 22
	malias     20, 47
	malias     20, 46
	malias     20, 45
	malias     20, 44
	malias     20, 43
	malias     20, 42
	malias     20, 41
	malias     20, 40
	malias     20, 39
	malias     20, 38
	malias     20, 37
	malias     20, 36
	malias     20, 35
	malias     20, 34
	malias     20, 33
	malias     20, 32
	malias     20, 31
	malias     20, 30
	malias     20, 29
	malias     20, 28
	malias     20, 27
	malias     20, 26
	malias     20, 25
	malias     20, 24
	malias     20, 23
	malias     20, 22
	malias     20, 21
	malias     19, 47
	malias     19, 46
	malias     19, 45
	malias     19, 44
	malias     19, 43
	malias     19, 42
	malias     19, 41
	malias     19, 40
	malias     19, 39
	malias     19, 38
	malias     19, 37
	malias     19, 36
	malias     19, 35
	malias     19, 34
	malias     19, 33
	malias     19, 32
	malias     19, 31
	malias     19, 30
	malias     19, 29
	malias     19, 28
	malias     19, 27
	malias     19, 26
	malias     19, 25
	malias     19, 24
	malias     19, 23
	malias     19, 22
	malias     19, 21
	malias     19, 20
	malias     18, 47
	malias     18, 46
	malias     18, 45
	malias     18, 44
	malias     18, 43
	malias     18, 42
	malias     18, 41
	malias     18, 40
	malias     18, 39
	malias     18, 38
	malias     18, 37
	malias     18, 36
	malias     18, 35
	malias     18, 34
	malias     18, 33
	malias     18, 32
	malias     18, 31
	malias     18, 30
	malias     18, 29
	malias     18, 28
	malias     18, 27
	malias     18, 26
	malias     18, 25
	malias     18, 24
	malias     18, 23
	malias     18, 22
	malias     18, 21
	malias     18, 20
	malias     18, 19
	malias     17, 47
	malias     17, 46
	malias     17, 45
	malias     17, 44
	malias     17, 43
	malias     17, 42
	malias     17, 41
	malias     17, 40
	malias     17, 39
	malias     17, 38
	malias     17, 37
	malias     17, 36
	malias     17, 35
	malias     17, 34
	malias     17, 33
	malias     17, 32
	malias     17, 31
	malias     17, 30
	malias     17, 29
	malias     17, 28
	malias     17, 27
	malias     17, 26
	malias     17, 25
	malias     17, 24
	malias     17, 23
	malias     17, 22
	malias     17, 21
	malias     17, 20
	malias     17, 19
	malias     17, 18
	malias     16, 47
	malias     16, 46
	malias     16, 45
	malias     16, 44
	malias     16, 43
	malias     16, 42
	malias     16, 41
	malias     16, 40
	malias     16, 39
	malias     16, 38
	malias     16, 37
	malias     16, 36
	malias     16, 35
	malias     16, 34
	malias     16, 33
	malias     16, 32
	malias     16, 31
	malias     16, 30
	malias     16, 29
	malias     16, 28
	malias     16, 27
	malias     16, 26
	malias     16, 25
	malias     16, 24
	malias     16, 23
	malias     16, 22
	malias     16, 21
	malias     16, 20
	malias     16, 19
	malias     16, 18
	malias     16, 17
	malias     15, 47
	malias     15, 46
	malias     15, 45
	malias     15, 44
	malias     15, 43
	malias     15, 42
	malias     15, 41
	malias     15, 40
	malias     15, 39
	malias     15, 38
	malias     15, 37
	malias     15, 36
	malias     15, 35
	malias     15, 34
	malias     15, 33
	malias     15, 32
	malias     15, 31
	malias     15, 30
	malias     15, 29
	malias     15, 28
	malias     15, 27
	malias     15, 26
	malias     15, 25
	malias     15, 24
	malias     15, 23
	malias     15, 22
	malias     15, 21
	malias     15, 20
	malias     15, 19
	malias     15, 18
	malias     15, 17
	malias     15, 16
	malias     14, 47
	malias     14, 46
	malias     14, 45
	malias     14, 44
	malias     14, 43
	malias     14, 42
	malias     14, 41
	malias     14, 40
	malias     14, 39
	malias     14, 38
	malias     14, 37
	malias     14, 36
	malias     14, 35
	malias     14, 34
	malias     14, 33
	malias     14, 32
	malias     14, 31
	malias     14, 30
	malias     14, 29
	malias     14, 28
	malias     14, 27
	malias     14, 26
	malias     14, 25
	malias     14, 24
	malias     14, 23
	malias     14, 22
	malias     14, 21
	malias     14, 20
	malias     14, 19
	malias     14, 18
	malias     14, 17
	malias     14, 16
	malias     14, 15
	malias     13, 47
	malias     13, 46
	malias     13, 45
	malias     13, 44
	malias     13, 43
	malias     13, 42
	malias     13, 41
	malias     13, 40
	malias     13, 39
	malias     13, 38
	malias     13, 37
	malias     13, 36
	malias     13, 35
	malias     13, 34
	malias     13, 33
	malias     13, 32
	malias     13, 31
	malias     13, 30
	malias     13, 29
	malias     13, 28
	malias     13, 27
	malias     13, 26
	malias     13, 25
	malias     13, 24
	malias     13, 23
	malias     13, 22
	malias     13, 21
	malias     13, 20
	malias     13, 19
	malias     13, 18
	malias     13, 17
	malias     13, 16
	malias     13, 15
	malias     13, 14
	malias     12, 47
	malias     12, 46
	malias     12, 45
	malias     12, 44
	malias     12, 43
	malias     12, 42
	malias     12, 41
	malias     12, 40
	malias     12, 39
	malias     12, 38
	malias     12, 37
	malias     12, 36
	malias     12, 35
	malias     12, 34
	malias     12, 33
	malias     12, 32
	malias     12, 31
	malias     12, 30
	malias     12, 29
	malias     12, 28
	malias     12, 27
	malias     12, 26
	malias     12, 25
	malias     12, 24
	malias     12, 23
	malias     12, 22
	malias     12, 21
	malias     12, 20
	malias     12, 19
	malias     12, 18
	malias     12, 17
	malias     12, 16
	malias     12, 15
	malias     12, 14
	malias     12, 13
	malias     11, 47
	malias     11, 46
	malias     11, 45
	malias     11, 44
	malias     11, 43
	malias     11, 42
	malias     11, 41
	malias     11, 40
	malias     11, 39
	malias     11, 38
	malias     11, 37
	malias     11, 36
	malias     11, 35
	malias     11, 34
	malias     11, 33
	malias     11, 32
	malias     11, 31
	malias     11, 30
	malias     11, 29
	malias     11, 28
	malias     11, 27
	malias     11, 26
	malias     11, 25
	malias     11, 24
	malias     11, 23
	malias     11, 22
	malias     11, 21
	malias     11, 20
	malias     11, 19
	malias     11, 18
	malias     11, 17
	malias     11, 16
	malias     11, 15
	malias     11, 14
	malias     11, 13
	malias     11, 12
	malias     10, 47
	malias     10, 46
	malias     10, 45
	malias     10, 44
	malias     10, 43
	malias     10, 42
	malias     10, 41
	malias     10, 40
	malias     10, 39
	malias     10, 38
	malias     10, 37
	malias     10, 36
	malias     10, 35
	malias     10, 34
	malias     10, 33
	malias     10, 32
	malias     10, 31
	malias     10, 30
	malias     10, 29
	malias     10, 28
	malias     10, 27
	malias     10, 26
	malias     10, 25
	malias     10, 24
	malias     10, 23
	malias     10, 22
	malias     10, 21
	malias     10, 20
	malias     10, 19
	malias     10, 18
	malias     10, 17
	malias     10, 16
	malias     10, 15
	malias     10, 14
	malias     10, 13
	malias     10, 12
	malias     10, 11
	malias     9, 47
	malias     9, 46
	malias     9, 45
	malias     9, 44
	malias     9, 43
	malias     9, 42
	malias     9, 41
	malias     9, 40
	malias     9, 39
	malias     9, 38
	malias     9, 37
	malias     9, 36
	malias     9, 35
	malias     9, 34
	malias     9, 33
	malias     9, 32
	malias     9, 31
	malias     9, 30
	malias     9, 29
	malias     9, 28
	malias     9, 27
	malias     9, 26
	malias     9, 25
	malias     9, 24
	malias     9, 23
	malias     9, 22
	malias     9, 21
	malias     9, 20
	malias     9, 19
	malias     9, 18
	malias     9, 17
	malias     9, 16
	malias     9, 15
	malias     9, 14
	malias     9, 13
	malias     9, 12
	malias     9, 11
	malias     9, 10
	malias     8, 47
	malias     8, 46
	malias     8, 45
	malias     8, 44
	malias     8, 43
	malias     8, 42
	malias     8, 41
	malias     8, 40
	malias     8, 39
	malias     8, 38
	malias     8, 37
	malias     8, 36
	malias     8, 35
	malias     8, 34
	malias     8, 33
	malias     8, 32
	malias     8, 31
	malias     8, 30
	malias     8, 29
	malias     8, 28
	malias     8, 27
	malias     8, 26
	malias     8, 25
	malias     8, 24
	malias     8, 23
	malias     8, 22
	malias     8, 21
	malias     8, 20
	malias     8, 19
	malias     8, 18
	malias     8, 17
	malias     8, 16
	malias     8, 15
	malias     8, 14
	malias     8, 13
	malias     8, 12
	malias     8, 11
	malias     8, 10
	malias     8, 9
	malias     7, 47
	malias     7, 46
	malias     7, 45
	malias     7, 44
	malias     7, 43
	malias     7, 42
	malias     7, 41
	malias     7, 40
	malias     7, 39
	malias     7, 38
	malias     7, 37
	malias     7, 36
	malias     7, 35
	malias     7, 34
	malias     7, 33
	malias     7, 32
	malias     7, 31
	malias     7, 30
	malias     7, 29
	malias     7, 28
	malias     7, 27
	malias     7, 26
	malias     7, 25
	malias     7, 24
	malias     7, 23
	malias     7, 22
	malias     7, 21
	malias     7, 20
	malias     7, 19
	malias     7, 18
	malias     7, 17
	malias     7, 16
	malias     7, 15
	malias     7, 14
	malias     7, 13
	malias     7, 12
	malias     7, 11
	malias     7, 10
	malias     7, 9
	malias     7, 8
	malias     6, 47
	malias     6, 46
	malias     6, 45
	malias     6, 44
	malias     6, 43
	malias     6, 42
	malias     6, 41
	malias     6, 40
	malias     6, 39
	malias     6, 38
	malias     6, 37
	malias     6, 36
	malias     6, 35
	malias     6, 34
	malias     6, 33
	malias     6, 32
	malias     6, 31
	malias     6, 30
	malias     6, 29
	malias     6, 28
	malias     6, 27
	malias     6, 26
	malias     6, 25
	malias     6, 24
	malias     6, 23
	malias     6, 22
	malias     6, 21
	malias     6, 20
	malias     6, 19
	malias     6, 18
	malias     6, 17
	malias     6, 16
	malias     6, 15
	malias     6, 14
	malias     6, 13
	malias     6, 12
	malias     6, 11
	malias     6, 10
	malias     6, 9
	malias     6, 8
	malias     6, 7
	malias     5, 47
	malias     5, 46
	malias     5, 45
	malias     5, 44
	malias     5, 43
	malias     5, 42
	malias     5, 41
	malias     5, 40
	malias     5, 39
	malias     5, 38
	malias     5, 37
	malias     5, 36
	malias     5, 35
	malias     5, 34
	malias     5, 33
	malias     5, 32
	malias     5, 31
	malias     5, 30
	malias     5, 29
	malias     5, 28
	malias     5, 27
	malias     5, 26
	malias     5, 25
	malias     5, 24
	malias     5, 23
	malias     5, 22
	malias     5, 21
	malias     5, 20
	malias     5, 19
	malias     5, 18
	malias     5, 17
	malias     5, 16
	malias     5, 15
	malias     5, 14
	malias     5, 13
	malias     5, 12
	malias     5, 11
	malias     5, 10
	malias     5, 9
	malias     5, 8
	malias     5, 7
	malias     5, 6
	malias     4, 47
	malias     4, 46
	malias     4, 45
	malias     4, 44
	malias     4, 43
	malias     4, 42
	malias     4, 41
	malias     4, 40
	malias     4, 39
	malias     4, 38
	malias     4, 37
	malias     4, 36
	malias     4, 35
	malias     4, 34
	malias     4, 33
	malias     4, 32
	malias     4, 31
	malias     4, 30
	malias     4, 29
	malias     4, 28
	malias     4, 27
	malias     4, 26
	malias     4, 25
	malias     4, 24
	malias     4, 23
	malias     4, 22
	malias     4, 21
	malias     4, 20
	malias     4, 19
	malias     4, 18
	malias     4, 17
	malias     4, 16
	malias     4, 15
	malias     4, 14
	malias     4, 13
	malias     4, 12
	malias     4, 11
	malias     4, 10
	malias     4, 9
	malias     4, 8
	malias     4, 7
	malias     4, 6
	malias     4, 5
	malias     3, 47
	malias     3, 46
	malias     3, 45
	malias     3, 44
	malias     3, 43
	malias     3, 42
	malias     3, 41
	malias     3, 40
	malias     3, 39
	malias     3, 38
	malias     3, 37
	malias     3, 36
	malias     3, 35
	malias     3, 34
	malias     3, 33
	malias     3, 32
	malias     3, 31
	malias     3, 30
	malias     3, 29
	malias     3, 28
	malias     3, 27
	malias     3, 26
	malias     3, 25
	malias     3, 24
	malias     3, 23
	malias     3, 22
	malias     3, 21
	malias     3, 20
	malias     3, 19
	malias     3, 18
	malias     3, 17
	malias     3, 16
	malias     3, 15
	malias     3, 14
	malias     3, 13
	malias     3, 12
	malias     3, 11
	malias     3, 10
	malias     3, 9
	malias     3, 8
	malias     3, 7
	malias     3, 6
	malias     3, 5
	malias     3, 4
	malias     2, 47
	malias     2, 46
	malias     2, 45
	malias     2, 44
	malias     2, 43
	malias     2, 42
	malias     2, 41
	malias     2, 40
	malias     2, 39
	malias     2, 38
	malias     2, 37
	malias     2, 36
	malias     2, 35
	malias     2, 34
	malias     2, 33
	malias     2, 32
	malias     2, 31
	malias     2, 30
	malias     2, 29
	malias     2, 28
	malias     2, 27
	malias     2, 26
	malias     2, 25
	malias     2, 24
	malias     2, 23
	malias     2, 22
	malias     2, 21
	malias     2, 20
	malias     2, 19
	malias     2, 18
	malias     2, 17
	malias     2, 16
	malias     2, 15
	malias     2, 14
	malias     2, 13
	malias     2, 12
	malias     2, 11
	malias     2, 10
	malias     2, 9
	malias     2, 8
	malias     2, 7
	malias     2, 6
	malias     2, 5
	malias     2, 4
	malias     2, 3
	malias     1, 47
	malias     1, 46
	malias     1, 45
	malias     1, 44
	malias     1, 43
	malias     1, 42
	malias     1, 41
	malias     1, 40
	malias     1, 39
	malias     1, 38
	malias     1, 37
	malias     1, 36
	malias     1, 35
	malias     1, 34
	malias     1, 33
	malias     1, 32
	malias     1, 31
	malias     1, 30
	malias     1, 29
	malias     1, 28
	malias     1, 27
	malias     1, 26
	malias     1, 25
	malias     1, 24
	malias     1, 23
	malias     1, 22
	malias     1, 21
	malias     1, 20
	malias     1, 19
	malias     1, 18
	malias     1, 17
	malias     1, 16
	malias     1, 15
	malias     1, 14
	malias     1, 13
	malias     1, 12
	malias     1, 11
	malias     1, 10
	malias     1, 9
	malias     1, 8
	malias     1, 7
	malias     1, 6
	malias     1, 5
	malias     1, 4
	malias     1, 3
	malias     1, 2
	bb         0
	succ       1
	dom        1
	rli        %a1
	rli        %a0
	add        %SP, %SP, -256
	mov        %r0, %ZERO
$BB1_1:                                 # %for.cond1.preheader
                                        # =>This Inner Loop Header: Depth=1
	bb         1
	loop       1
	lext       1
	lhdr       1, 1
	pred       1
	pred       0
	succ       1
	succ       2
	dom        2
	pdom       0
	rli        %r0
	rli        %a1
	rli        %a0
	sll        %r3, %r0, 5
	mloc       1
	lw         %r1, %a0, %r3
	sll        %r1, %r1, 3
	add        %r4, %SP, 0
	mloc       2
	sw         %r1, %r4, %r3
	add        %r1, %r4, %r3
	add        %r2, %a0, %r3
	mloc       3
	lw         %r5, %r2, 4
	sll        %r5, %r5, 3
	mloc       4
	sw         %r5, %r1, 4
	mloc       5
	lw         %r5, %r2, 8
	sll        %r5, %r5, 3
	mloc       6
	sw         %r5, %r1, 8
	mloc       7
	lw         %r5, %r2, 12
	sll        %r5, %r5, 3
	mloc       8
	sw         %r5, %r1, 12
	mloc       9
	lw         %r5, %r2, 16
	sll        %r5, %r5, 3
	mloc       10
	sw         %r5, %r1, 16
	mloc       11
	lw         %r5, %r2, 20
	sll        %r5, %r5, 3
	mloc       12
	sw         %r5, %r1, 20
	mloc       13
	lw         %r5, %r2, 24
	sll        %r5, %r5, 3
	mloc       14
	sw         %r5, %r1, 24
	mloc       15
	lw         %r2, %r2, 28
	sll        %r7, %r2, 3
	mloc       16
	sw         %r7, %r1, 28
	mloc       17
	lw         %r9, %r4, %r3
	mloc       18
	lw         %r10, %r1, 16
	add        %r2, %r10, %r9
	mloc       19
	lw         %r8, %r1, 8
	mul        %r5, %r8, 21407
	add        %r5, %r5, 8192
	sra        %r5, %r5, 14
	mloc       20
	lw         %r12, %r1, 24
	mul        %r6, %r12, 8867
	add        %r6, %r6, 8192
	sra        %r6, %r6, 14
	add        %r5, %r6, %r5
	add        %r15, %r5, %r2
	mloc       21
	lw         %r14, %r1, 4
	add        %r11, %r7, %r14
	mloc       22
	lw         %r6, %r1, 12
	mul        %r6, %r6, 23170
	add        %r6, %r6, 8192
	sra        %r13, %r6, 14
	add        %r6, %r13, %r11
	mul        %r16, %r6, 13623
	add        %r16, %r16, 8192
	sra        %r17, %r16, 14
	sub       %r14, %r14, %r7
	mloc       23
	lw         %r7, %r1, 20
	mul        %r7, %r7, 23170
	add        %r7, %r7, 8192
	sra        %r16, %r7, 14
	add        %r7, %r16, %r14
	mul        %r18, %r7, 9102
	add        %r18, %r18, 8192
	sra        %r18, %r18, 14
	add        %r17, %r18, %r17
	sub       %r18, %r15, %r17
	mloc       24
	sw         %r18, %r1, 28
	add        %r15, %r17, %r15
	mloc       25
	sw         %r15, %r4, %r3
	sub       %r3, %r9, %r10
	mul        %r4, %r12, 21407
	add        %r4, %r4, 8192
	sra        %r4, %r4, 14
	mul        %r8, %r8, 8867
	add        %r8, %r8, 8192
	sra        %r8, %r8, 14
	sub       %r8, %r8, %r4
	add        %r9, %r8, %r3
	sub       %r4, %r11, %r13
	mul        %r10, %r4, 3196
	add        %r10, %r10, 8192
	sra        %r11, %r10, 14
	sub       %r10, %r14, %r16
	mul        %r12, %r10, 16069
	add        %r12, %r12, 8192
	sra        %r12, %r12, 14
	add        %r11, %r12, %r11
	sub       %r12, %r9, %r11
	mloc       26
	sw         %r12, %r1, 24
	add        %r9, %r11, %r9
	mloc       27
	sw         %r9, %r1, 4
	sub       %r3, %r3, %r8
	mul        %r8, %r10, 3196
	add        %r8, %r8, 8192
	sra        %r8, %r8, 14
	mul        %r4, %r4, 16069
	add        %r4, %r4, 8192
	sra        %r4, %r4, 14
	sub       %r4, %r4, %r8
	sub       %r8, %r3, %r4
	mloc       28
	sw         %r8, %r1, 20
	add        %r3, %r4, %r3
	mloc       29
	sw         %r3, %r1, 8
	sub       %r2, %r2, %r5
	mul        %r3, %r6, 9102
	add        %r3, %r3, 8192
	sra        %r3, %r3, 14
	mul        %r4, %r7, 13623
	add        %r4, %r4, 8192
	sra        %r4, %r4, 14
	sub       %r3, %r4, %r3
	sub       %r4, %r2, %r3
	mloc       30
	sw         %r4, %r1, 16
	add        %r2, %r3, %r2
	mloc       31
	sw         %r2, %r1, 12
	add        %r0, %r0, 1
	brne       %r0, 8, ($BB1_1)
# BB#2:                                 # %for.cond15.preheader.preheader
	bb         2
	pred       1
	succ       3
	dom        3
	pdom       1
	rli        %a1
	mov        %r0, %ZERO
$BB1_3:                                 # %for.cond15.preheader
                                        # =>This Inner Loop Header: Depth=1
	bb         3
	loop       0
	lhdr       0, 1
	pred       19
	pred       2
	succ       5
	succ       4
	dom        5
	dom        4
	pdom       2
	rli        %r0
	rli        %a1
	sll        %r1, %r0, 2
	add        %r2, %SP, 0
	mloc       32
	lw         %r3, %r2, %r1
	add        %r2, %r2, %r1
	mloc       33
	lw         %r6, %r2, 128
	add        %r4, %r6, %r3
	mloc       34
	lw         %r5, %r2, 64
	mul        %r1, %r5, 21407
	add        %r1, %r1, 8192
	sra        %r1, %r1, 14
	mloc       35
	lw         %r10, %r2, 192
	mul        %r7, %r10, 8867
	add        %r7, %r7, 8192
	sra        %r7, %r7, 14
	add        %r7, %r7, %r1
	add        %r1, %r7, %r4
	mloc       36
	lw         %r12, %r2, 32
	mloc       37
	lw         %r13, %r2, 224
	add        %r8, %r13, %r12
	mloc       38
	lw         %r9, %r2, 96
	mul        %r9, %r9, 23170
	add        %r9, %r9, 8192
	sra        %r11, %r9, 14
	add        %r9, %r11, %r8
	mul        %r14, %r9, 13623
	add        %r14, %r14, 8192
	sra        %r16, %r14, 14
	sub       %r14, %r12, %r13
	mloc       39
	lw         %r2, %r2, 160
	mul        %r2, %r2, 23170
	add        %r2, %r2, 8192
	sra        %r15, %r2, 14
	add        %r13, %r15, %r14
	mul        %r2, %r13, 9102
	add        %r2, %r2, 8192
	sra        %r2, %r2, 14
	add        %r2, %r2, %r16
	add        %r12, %r2, %r1
	sra        %r16, %r12, 31
	add        %r12, %r12, %r16
	add        %r12, %r12, 32
	sra        %r12, %r12, 6
	add        %r12, %r12, 128
	mul        %r9, %r9, 9102
	add        %r9, %r9, 8192
	sra        %r9, %r9, 14
	mul        %r13, %r13, 13623
	add        %r13, %r13, 8192
	sra        %r13, %r13, 14
	sub       %r3, %r3, %r6
	mul        %r6, %r10, 21407
	add        %r6, %r6, 8192
	sra        %r6, %r6, 14
	mul        %r5, %r5, 8867
	add        %r5, %r5, 8192
	sra        %r5, %r5, 14
	sub       %r10, %r5, %r6
	sub       %r5, %r3, %r10
	sub       %r6, %r14, %r15
	mul        %r14, %r6, 3196
	add        %r14, %r14, 8192
	sra        %r14, %r14, 14
	sub       %r11, %r8, %r11
	mul        %r8, %r11, 16069
	add        %r8, %r8, 8192
	sra        %r8, %r8, 14
	sub       %r8, %r8, %r14
	add        %r3, %r10, %r3
	mul        %r10, %r11, 3196
	add        %r10, %r10, 8192
	sra        %r10, %r10, 14
	mul        %r6, %r6, 16069
	add        %r6, %r6, 8192
	sra        %r6, %r6, 14
	add        %r6, %r6, %r10
	add        %r10, %r6, %r3
	mov        %r11, %ZERO
	brlt       %r12, 1, ($BB1_5)
# BB#4:                                 # %cond.true
                                        #   in Loop: Header=BB1_3 Depth=1
	bb         4
	loop       0
	pred       3
	succ       5
	rli        %r0
	rli        %r6
	rli        %r3
	rli        %r8
	rli        %r5
	rli        %r13
	rli        %r9
	rli        %r2
	rli        %r1
	rli        %r7
	rli        %r4
	rli        %a1
	rli        %r12
	rli        %r10
	sel_lt     %r11, %r12, 255, %r12, -1
$BB1_5:                                 # %cond.end39
                                        #   in Loop: Header=BB1_3 Depth=1
	bb         5
	loop       0
	pred       4
	pred       3
	succ       7
	succ       6
	dom        7
	dom        6
	pdom       4
	pdom       3
	rli        %r11
	rli        %r0
	rli        %r6
	rli        %r3
	rli        %r8
	rli        %r5
	rli        %r13
	rli        %r9
	rli        %r2
	rli        %r1
	rli        %r7
	rli        %r4
	rli        %a1
	rli        %r10
	sub       %r4, %r4, %r7
	sub       %r7, %r13, %r9
	add        %r9, %r8, %r5
	mloc       40
	sb         %r11, %a1, %r0
	sra        %r11, %r10, 31
	add        %r10, %r10, %r11
	add        %r10, %r10, 32
	sra        %r10, %r10, 6
	add        %r10, %r10, 128
	mov        %r12, %ZERO
	brle       %r10, 0, ($BB1_7)
# BB#6:                                 # %cond.true.1
                                        #   in Loop: Header=BB1_3 Depth=1
	bb         6
	loop       0
	pred       5
	succ       7
	rli        %r0
	rli        %r6
	rli        %r3
	rli        %r8
	rli        %r5
	rli        %r7
	rli        %r4
	rli        %r2
	rli        %r1
	rli        %a1
	rli        %r10
	rli        %r9
	sel_lt     %r12, %r10, 255, %r10, -1
$BB1_7:                                 # %cond.end39.1
                                        #   in Loop: Header=BB1_3 Depth=1
	bb         7
	loop       0
	pred       6
	pred       5
	succ       9
	succ       8
	dom        9
	dom        8
	pdom       6
	pdom       5
	rli        %r12
	rli        %r0
	rli        %r6
	rli        %r3
	rli        %r8
	rli        %r5
	rli        %r7
	rli        %r4
	rli        %r2
	rli        %r1
	rli        %a1
	rli        %r9
	add        %r10, %r7, %r4
	add        %r11, %a1, %r0
	mloc       41
	sb         %r12, %r11, 8
	sra        %r12, %r9, 31
	add        %r9, %r9, %r12
	add        %r9, %r9, 32
	sra        %r9, %r9, 6
	add        %r12, %r9, 128
	mov        %r9, %ZERO
	brlt       %r12, 1, ($BB1_9)
# BB#8:                                 # %cond.true.2
                                        #   in Loop: Header=BB1_3 Depth=1
	bb         8
	loop       0
	pred       7
	succ       9
	rli        %r0
	rli        %r11
	rli        %r6
	rli        %r3
	rli        %r8
	rli        %r5
	rli        %r7
	rli        %r4
	rli        %r2
	rli        %r1
	rli        %a1
	rli        %r12
	rli        %r10
	sel_lt     %r9, %r12, 255, %r12, -1
$BB1_9:                                 # %cond.end39.2
                                        #   in Loop: Header=BB1_3 Depth=1
	bb         9
	loop       0
	pred       8
	pred       7
	succ       11
	succ       10
	dom        11
	dom        10
	pdom       8
	pdom       7
	rli        %r9
	rli        %r0
	rli        %r11
	rli        %r6
	rli        %r3
	rli        %r8
	rli        %r5
	rli        %r7
	rli        %r4
	rli        %r2
	rli        %r1
	rli        %a1
	rli        %r10
	sub       %r7, %r4, %r7
	mloc       42
	sb         %r9, %r11, 16
	sra        %r4, %r10, 31
	add        %r4, %r10, %r4
	add        %r4, %r4, 32
	sra        %r4, %r4, 6
	add        %r4, %r4, 128
	mov        %r9, %ZERO
	brlt       %r4, 1, ($BB1_11)
# BB#10:                                # %cond.true.3
                                        #   in Loop: Header=BB1_3 Depth=1
	bb         10
	loop       0
	pred       9
	succ       11
	rli        %r0
	rli        %r6
	rli        %r3
	rli        %r8
	rli        %r5
	rli        %r2
	rli        %r1
	rli        %a1
	rli        %r4
	rli        %r7
	sel_lt     %r9, %r4, 255, %r4, -1
$BB1_11:                                # %cond.end39.3
                                        #   in Loop: Header=BB1_3 Depth=1
	bb         11
	loop       0
	pred       10
	pred       9
	succ       13
	succ       12
	dom        13
	dom        12
	pdom       10
	pdom       9
	rli        %r9
	rli        %r0
	rli        %r6
	rli        %r3
	rli        %r8
	rli        %r5
	rli        %r2
	rli        %r1
	rli        %a1
	rli        %r7
	sub       %r4, %r5, %r8
	add        %r5, %a1, %r0
	mloc       43
	sb         %r9, %r5, 24
	sra        %r8, %r7, 31
	add        %r7, %r7, %r8
	add        %r7, %r7, 32
	sra        %r7, %r7, 6
	add        %r8, %r7, 128
	mov        %r7, %ZERO
	brlt       %r8, 1, ($BB1_13)
# BB#12:                                # %cond.true.4
                                        #   in Loop: Header=BB1_3 Depth=1
	bb         12
	loop       0
	pred       11
	succ       13
	rli        %r0
	rli        %r5
	rli        %r6
	rli        %r3
	rli        %r2
	rli        %r1
	rli        %a1
	rli        %r8
	rli        %r4
	sel_lt     %r7, %r8, 255, %r8, -1
$BB1_13:                                # %cond.end39.4
                                        #   in Loop: Header=BB1_3 Depth=1
	bb         13
	loop       0
	pred       12
	pred       11
	succ       15
	succ       14
	dom        15
	dom        14
	pdom       12
	pdom       11
	rli        %r7
	rli        %r0
	rli        %r5
	rli        %r6
	rli        %r3
	rli        %r2
	rli        %r1
	rli        %a1
	rli        %r4
	sub       %r3, %r3, %r6
	mloc       44
	sb         %r7, %r5, 32
	sra        %r5, %r4, 31
	add        %r4, %r4, %r5
	add        %r4, %r4, 32
	sra        %r4, %r4, 6
	add        %r5, %r4, 128
	mov        %r4, %ZERO
	brlt       %r5, 1, ($BB1_15)
# BB#14:                                # %cond.true.5
                                        #   in Loop: Header=BB1_3 Depth=1
	bb         14
	loop       0
	pred       13
	succ       15
	rli        %r0
	rli        %r2
	rli        %r1
	rli        %a1
	rli        %r5
	rli        %r3
	sel_lt     %r4, %r5, 255, %r5, -1
$BB1_15:                                # %cond.end39.5
                                        #   in Loop: Header=BB1_3 Depth=1
	bb         15
	loop       0
	pred       14
	pred       13
	succ       17
	succ       16
	dom        17
	dom        16
	pdom       14
	pdom       13
	rli        %r4
	rli        %r0
	rli        %r2
	rli        %r1
	rli        %a1
	rli        %r3
	sub       %r1, %r1, %r2
	add        %r2, %a1, %r0
	mloc       45
	sb         %r4, %r2, 40
	sra        %r4, %r3, 31
	add        %r3, %r3, %r4
	add        %r3, %r3, 32
	sra        %r3, %r3, 6
	add        %r4, %r3, 128
	mov        %r3, %ZERO
	brlt       %r4, 1, ($BB1_17)
# BB#16:                                # %cond.true.6
                                        #   in Loop: Header=BB1_3 Depth=1
	bb         16
	loop       0
	pred       15
	succ       17
	rli        %r0
	rli        %r2
	rli        %a1
	rli        %r4
	rli        %r1
	sel_lt     %r3, %r4, 255, %r4, -1
$BB1_17:                                # %cond.end39.6
                                        #   in Loop: Header=BB1_3 Depth=1
	bb         17
	loop       0
	pred       16
	pred       15
	succ       19
	succ       18
	dom        19
	dom        18
	pdom       16
	pdom       15
	rli        %r3
	rli        %r0
	rli        %r2
	rli        %a1
	rli        %r1
	mloc       46
	sb         %r3, %r2, 48
	sra        %r2, %r1, 31
	add        %r1, %r1, %r2
	add        %r1, %r1, 32
	sra        %r1, %r1, 6
	add        %r2, %r1, 128
	mov        %r1, %ZERO
	brlt       %r2, 1, ($BB1_19)
# BB#18:                                # %cond.true.7
                                        #   in Loop: Header=BB1_3 Depth=1
	bb         18
	loop       0
	pred       17
	succ       19
	rli        %r0
	rli        %a1
	rli        %r2
	sel_lt     %r1, %r2, 255, %r2, -1
$BB1_19:                                # %cond.end39.7
                                        #   in Loop: Header=BB1_3 Depth=1
	bb         19
	loop       0
	lext       0
	pred       18
	pred       17
	succ       3
	succ       20
	dom        20
	pdom       18
	pdom       17
	rli        %r1
	rli        %r0
	rli        %a1
	add        %r2, %a1, %r0
	mloc       47
	sb         %r1, %r2, 56
	add        %r0, %r0, 1
	brne       %r0, 8, ($BB1_3)
# BB#20:                                # %for.end50
	bb         20
	pred       19
	pdom       19
	add        %SP, %SP, 256
	ret        %RA
	.end       IDCT
$tmp1:
	.size	IDCT, ($tmp1)-IDCT

	.globl	FGETC
	.align	2
	.type	FGETC,@function
	.ent       FGETC                # @FGETC
FGETC:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       0
	rvals      32
	mnum       3
	malias     1, 3
	bb         0
	mov        %r0, vld_count
	mloc       1
	lw         %r1, %r0, 0
	sra        %r2, %r1, 31
	srl        %r2, %r2, 30
	add        %r2, %r1, %r2
	and        %r3, %r2, 4294967292
	mov        %r2, input_buffer
	mloc       2
	lw         %r2, %r2, %r3
	add        %r4, %r1, 1
	mloc       3
	sw         %r4, %r0, 0
	sub       %r0, %r1, %r3
	sub           %r0, 3, %r0
	sll        %r0, %r0, 3
	sll        %r0, %r2, %r0
	srl        %v0, %r0, 24
	ret        %RA
	.end       FGETC
$tmp2:
	.size	FGETC, ($tmp2)-FGETC

	.globl	FSEEK
	.align	2
	.type	FSEEK,@function
	.ent       FSEEK                # @FSEEK
FSEEK:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       2
	rvals      32
	mnum       2
	malias     1, 2
	bb         0
	rli        %a0
	mov        %r0, vld_count
	mloc       1
	lw         %r1, %r0, 0
	add        %r1, %r1, %a0
	mloc       2
	sw         %r1, %r0, 0
	mov        %v0, %ZERO
	ret        %RA
	.end       FSEEK
$tmp3:
	.size	FSEEK, ($tmp3)-FSEEK

	.globl	FTELL
	.align	2
	.type	FTELL,@function
	.ent       FTELL                # @FTELL
FTELL:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       0
	rvals      32
	mnum       1
	bb         0
	mov        %r0, vld_count
	mloc       1
	lw         %v0, %r0, 0
	ret        %RA
	.end       FTELL
$tmp4:
	.size	FTELL, ($tmp4)-FTELL

	.globl	FOPEN
	.align	2
	.type	FOPEN,@function
	.ent       FOPEN                # @FOPEN
FOPEN:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       2
	rvals      32
	mnum       1
	bb         0
	mov        %r0, vld_count
	mloc       1
	sw         %ZERO, %r0, 0
	mov        %v0, 1
	ret        %RA
	.end       FOPEN
$tmp5:
	.size	FOPEN, ($tmp5)-FOPEN

	.globl	FCLOSE
	.align	2
	.type	FCLOSE,@function
	.ent       FCLOSE               # @FCLOSE
FCLOSE:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       0
	bb         0
	ret        %RA
	.end       FCLOSE
$tmp6:
	.size	FCLOSE, ($tmp6)-FCLOSE

	.globl	unpack_block
	.align	2
	.type	unpack_block,@function
	.ent       unpack_block         # @unpack_block
unpack_block:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       2
	mnum       14
	malias     13, 14
	malias     12, 14
	malias     12, 13
	malias     11, 12
	malias     10, 14
	malias     10, 13
	malias     10, 12
	malias     10, 11
	malias     9, 14
	malias     9, 13
	malias     9, 12
	malias     9, 11
	malias     9, 10
	malias     8, 14
	malias     8, 13
	malias     8, 12
	malias     8, 10
	malias     8, 9
	malias     7, 14
	malias     7, 13
	malias     7, 12
	malias     7, 11
	malias     7, 10
	malias     7, 9
	malias     7, 8
	malias     6, 12
	malias     6, 11
	malias     6, 10
	malias     6, 9
	malias     6, 7
	malias     5, 14
	malias     5, 12
	malias     5, 10
	malias     5, 9
	malias     5, 8
	malias     5, 7
	malias     4, 14
	malias     4, 12
	malias     4, 10
	malias     4, 9
	malias     4, 8
	malias     4, 7
	malias     3, 14
	malias     3, 12
	malias     3, 10
	malias     3, 9
	malias     3, 8
	malias     3, 7
	malias     3, 4
	malias     2, 14
	malias     2, 12
	malias     2, 10
	malias     2, 9
	malias     2, 8
	malias     2, 7
	malias     1, 14
	malias     1, 13
	malias     1, 12
	malias     1, 10
	malias     1, 9
	malias     1, 8
	malias     1, 7
	malias     1, 5
	malias     1, 4
	malias     1, 3
	malias     1, 2
	bb         0
	succ       1
	dom        1
	rli        %a1
	rli        %a0
	mov        %r0, %a0
	mov        %r1, %ZERO
$BB7_1:                                 # %for.body
                                        # =>This Inner Loop Header: Depth=1
	bb         1
	loop       1
	lext       1
	lhdr       1, 1
	pred       1
	pred       0
	succ       1
	succ       2
	dom        2
	pdom       0
	rli        %r1
	rli        %a1
	rli        %r0
	sll        %r2, %r1, 2
	mloc       1
	sw         %ZERO, %r0, %r2
	add        %r1, %r1, 1
	brne       %r1, 64, ($BB7_1)
# BB#2:                                 # %for.end
	bb         2
	pred       1
	succ       3
	dom        3
	pdom       1
	rli        %a1
	rli        %r0
	sll        %r2, %a1, 4
	mov        %r1, comp
	add        %r3, %r1, %r2
	mloc       2
	lbs        %a0, %r3, 7
	call       get_symbol
	mov        %r1, %v0
	mov        %a0, %r1
	call       get_bits
	mov        %a0, %v0
	mov        %a1, %r1
	call       reformat
	mloc       3
	lw         %r1, %r3, 12
	add        %r1, %r1, %v0
	mloc       4
	sw         %r1, %r3, 12
	mloc       5
	lbs        %r4, %r3, 6
	sll        %r4, %r4, 2
	mov        %r5, QTable
	mloc       6
	lw         %r4, %r5, %r4
	mloc       7
	lb         %r4, %r4, 0
	mul        %r1, %r4, %r1
	mloc       8
	sw         %r1, %r0, 0
	mov        %r1, 1
	mov        %r6, G_ZZ
$BB7_3:                                 # %for.body21
                                        # =>This Inner Loop Header: Depth=1
	bb         3
	loop       0
	lext       0
	lhdr       0, 1
	pred       7
	pred       2
	succ       4
	succ       8
	dom        4
	dom        8
	pdom       2
	rli        %r6
	rli        %r1
	rli        %r3
	rli        %r2
	rli        %r0
	mloc       9
	lbs        %r4, %r3, 8
	add        %a0, %r4, 2
	call       get_symbol
	breq       %v0, 0, ($BB7_8)
# BB#4:                                 # %for.body21
                                        #   in Loop: Header=BB7_3 Depth=1
	bb         4
	loop       0
	pred       3
	succ       6
	succ       5
	dom        6
	dom        7
	dom        5
	rli        %r6
	rli        %r1
	rli        %v0
	rli        %r3
	rli        %r2
	rli        %r0
	brne       %v0, 240, ($BB7_6)
# BB#5:                                 # %if.then32
                                        #   in Loop: Header=BB7_3 Depth=1
	bb         5
	loop       0
	pred       4
	succ       7
	rli        %r6
	rli        %r1
	rli        %r3
	rli        %r2
	rli        %r0
	add        %r4, %r1, 15
	j          ($BB7_7)
$BB7_6:                                 # %if.end34
                                        #   in Loop: Header=BB7_3 Depth=1
	bb         6
	loop       0
	pred       4
	succ       7
	rli        %r6
	rli        %r1
	rli        %v0
	rli        %r3
	rli        %r2
	rli        %r0
	srl        %r4, %v0, 4
	add        %r4, %r4, %r1
	and        %r1, %v0, 15
	mov        %a0, %r1
	call       get_bits
	mov        %a0, %v0
	mov        %a1, %r1
	call       reformat
	mov        %r1, comp
	add        %r1, %r1, %r2
	mloc       10
	lbs        %r1, %r1, 6
	sll        %r1, %r1, 2
	mov        %r5, QTable
	mloc       11
	lw         %r1, %r5, %r1
	mloc       12
	lb         %r1, %r1, %r4
	mul        %r1, %r1, %v0
	sll        %r5, %r4, 2
	mloc       13
	lw         %r5, %r6, %r5
	sll        %r5, %r5, 2
	mloc       14
	sw         %r1, %r0, %r5
$BB7_7:                                 # %for.inc52
                                        #   in Loop: Header=BB7_3 Depth=1
	bb         7
	loop       0
	lext       0
	pred       6
	pred       5
	succ       8
	succ       3
	pdom       6
	pdom       4
	pdom       5
	rli        %r6
	rli        %r4
	rli        %r3
	rli        %r2
	rli        %r0
	add        %r1, %r4, 1
	brltu      %r1, 64, ($BB7_3)
	j          ($BB7_8)
$BB7_8:                                 # %for.end54
	bb         8
	pred       7
	pred       3
	pdom       7
	pdom       3
	ret        %RA
	.end       unpack_block
$tmp7:
	.size	unpack_block, ($tmp7)-unpack_block

	.globl	main
	.align	2
	.type	main,@function
	.ent       main                 # @main
main:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       0
	rvals      32
	bb         0
	call       JpegToBmp
	call       free_structures
	mov        %v0, %ZERO
	ret        %RA
	.end       main
$tmp8:
	.size	main, ($tmp8)-main

	.globl	JpegToBmp
	.align	2
	.type	JpegToBmp,@function
	.ent       JpegToBmp            # @JpegToBmp
JpegToBmp:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       0
	rvals      32
	mnum       37
	malias     36, 37
	malias     32, 34
	malias     31, 33
	malias     24, 28
	malias     23, 28
	malias     23, 24
	malias     22, 37
	malias     22, 36
	malias     22, 35
	malias     22, 34
	malias     22, 33
	malias     22, 32
	malias     22, 31
	malias     22, 30
	malias     22, 29
	malias     22, 28
	malias     22, 27
	malias     22, 26
	malias     22, 25
	malias     22, 24
	malias     22, 23
	malias     21, 22
	malias     20, 22
	malias     19, 35
	malias     19, 22
	malias     18, 22
	malias     18, 21
	malias     17, 28
	malias     17, 24
	malias     17, 23
	malias     17, 22
	malias     16, 22
	malias     15, 22
	malias     14, 28
	malias     14, 24
	malias     14, 23
	malias     14, 22
	malias     14, 17
	malias     13, 22
	malias     12, 22
	malias     11, 22
	malias     10, 25
	malias     10, 22
	malias     9, 28
	malias     9, 24
	malias     9, 23
	malias     9, 22
	malias     9, 17
	malias     9, 14
	malias     8, 22
	malias     7, 22
	malias     6, 37
	malias     6, 36
	malias     6, 22
	malias     5, 22
	malias     4, 22
	malias     3, 22
	malias     2, 22
	malias     1, 37
	malias     1, 36
	malias     1, 22
	malias     1, 6
	bb         0
	succ       1
	succ       57
	dom        1
	dom        57
	mov        %a0, ($.str)
	mov        %a1, ($.str1)
	call       FOPEN
	mov        %r0, %v0
	mov        %v0, -1
	breq       %r0, 0, ($BB9_57)
# BB#1:                                 # %if.end
	bb         1
	pred       0
	succ       2
	succ       3
	dom        2
	dom        3
	call       get_next_MK
	breq       %v0, 65496, ($BB9_3)
# BB#2:                                 # %if.then2
	bb         2
	pred       1
	succ       3
	call       aborted_stream
$BB9_3:                                 # %if.end3
	bb         3
	pred       2
	pred       1
	succ       5
	dom        5
	pdom       2
	pdom       1
	mov        %r0, in_frame
	mloc       1
	sw         %ZERO, %r0, 0
	mov        %r0, QTvalid
	mloc       2
	sw         %ZERO, %r0, 0
	mloc       3
	sw         %ZERO, %r0, 4
	mloc       4
	sw         %ZERO, %r0, 8
	mloc       5
	sw         %ZERO, %r0, 12
	mov        %r0, %ZERO
	j          ($BB9_5)
$BB9_4:                                 # %if.end145
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         4
	loop       0
	pred       40
	pred       16
	succ       5
	pdom       16
	rli        %r0
	call       aborted_stream
$BB9_5:                                 # %do.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_24 Depth 2
                                        #     Child Loop BB9_48 Depth 2
                                        #     Child Loop BB9_30 Depth 2
                                        #       Child Loop BB9_31 Depth 3
                                        #     Child Loop BB9_52 Depth 2
                                        #     Child Loop BB9_10 Depth 2
	bb         5
	loop       0
	lhdr       0, 1
	pred       39
	pred       41
	pred       4
	pred       14
	pred       46
	pred       37
	pred       36
	pred       43
	pred       42
	pred       44
	pred       53
	pred       18
	pred       3
	succ       15
	succ       6
	dom        15
	dom        4
	dom        38
	dom        6
	pdom       39
	pdom       41
	pdom       38
	pdom       40
	pdom       15
	pdom       4
	pdom       14
	pdom       13
	pdom       45
	pdom       46
	pdom       37
	pdom       8
	pdom       35
	pdom       36
	pdom       43
	pdom       42
	pdom       44
	pdom       53
	pdom       17
	pdom       18
	pdom       3
	rli        %r0
	call       get_next_MK
	breq       %v0, -1, ($BB9_15)
# BB#6:                                 # %do.body
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         6
	loop       0
	pred       5
	succ       17
	succ       7
	dom        17
	dom        7
	pdom       5
	rli        %r0
	rli        %v0
	brgtu      %v0, 65533, ($BB9_17)
	j          ($BB9_7)
$BB9_7:                                 # %do.body
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         7
	loop       0
	pred       6
	succ       19
	succ       8
	dom        19
	dom        8
	pdom       6
	rli        %r0
	rli        %v0
	brgtu      %v0, 65496, ($BB9_19)
	j          ($BB9_8)
$BB9_8:                                 # %do.body
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         8
	loop       0
	pred       7
	succ       35
	succ       9
	dom        35
	dom        9
	rli        %r0
	rli        %v0
	brne       %v0, 65472, ($BB9_35)
# BB#9:                                 # %sw.bb
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         9
	loop       0
	pred       8
	succ       11
	succ       10
	dom        11
	dom        10
	rli        %r0
	mov        %r1, in_frame
	mov        %r2, 1
	mloc       6
	sw         %r2, %r1, 0
	call       get_size
	call       FGETC
	call       get_size
	mov        %r1, y_size
	mloc       7
	sw         %v0, %r1, 0
	call       get_size
	mov        %r1, x_size
	mloc       8
	sw         %v0, %r1, 0
	call       FGETC
	mov        %r1, n_comp
	mloc       9
	sw         %v0, %r1, 0
	mov        %r2, %ZERO
	brlt       %v0, 1, ($BB9_11)
$BB9_10:                                # %for.body13
                                        #   Parent Loop BB9_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	bb         10
	loop       5
	lext       5
	lhdr       5, 2
	loop       0
	pred       10
	pred       9
	succ       11
	succ       10
	rli        %r2
	rli        %r0
	rli        %r1
	sll        %r3, %r2, 4
	call       FGETC
	mov        %r4, comp
	mloc       10
	sb         %v0, %r4, %r3
	add        %r3, %r4, %r3
	call       FGETC
	srl        %r4, %v0, 4
	mloc       11
	sb         %r4, %r3, 2
	and        %r4, %v0, 15
	mloc       12
	sb         %r4, %r3, 3
	call       FGETC
	mloc       13
	sb         %v0, %r3, 6
	add        %r2, %r2, 1
	mloc       14
	lw         %r3, %r1, 0
	brlt       %r2, %r3, ($BB9_10)
$BB9_11:                                # %for.end26
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         11
	loop       0
	pred       10
	pred       9
	succ       13
	succ       12
	dom        13
	dom        12
	pdom       10
	pdom       9
	rli        %r0
	call       init_MCU
	brne       %v0, -1, ($BB9_13)
# BB#12:                                # %if.then30
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         12
	loop       0
	pred       11
	succ       13
	rli        %r0
	call       aborted_stream
$BB9_13:                                # %if.end31
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         13
	loop       0
	pred       12
	pred       11
	succ       45
	succ       14
	dom        45
	dom        14
	pdom       12
	pdom       11
	rli        %r0
	mov        %r1, MCU_sx
	mloc       15
	lw         %r1, %r1, 0
	mov        %r2, MCU_sy
	mloc       16
	lw         %r2, %r2, 0
	mul        %r1, %r2, %r1
	mov        %r2, n_comp
	mloc       17
	lw         %r2, %r2, 0
	mul        %a0, %r1, %r2
	call       malloc
	mov        %r1, ColorBuffer
	mloc       18
	sw         %v0, %r1, 0
	mov        %a0, 256
	call       malloc
	mov        %r2, FBuff
	mloc       19
	sw         %v0, %r2, 0
	mov        %a0, 64
	call       malloc
	mov        %r3, PBuff
	mloc       20
	sw         %v0, %r3, 0
	mloc       21
	lw         %r1, %r1, 0
	brne       %r1, 0, ($BB9_45)
$BB9_14:                                # %if.then43
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         14
	loop       0
	pred       46
	pred       45
	pred       13
	succ       5
	rli        %r0
	mov        %a0, 1
	call       exit
	j          ($BB9_5)
$BB9_15:                                # %do.body
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         15
	loop       0
	pred       5
	succ       38
	succ       16
	dom        16
	rli        %r0
	rli        %v0
	brne       %v0, -1, ($BB9_38)
# BB#16:                                # %if.end140.thread
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         16
	loop       0
	pred       15
	succ       4
	rli        %r0
	call       aborted_stream
	j          ($BB9_4)
$BB9_17:                                # %do.body
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         17
	loop       0
	pred       6
	succ       38
	succ       18
	dom        18
	rli        %r0
	rli        %v0
	brne       %v0, 65534, ($BB9_38)
# BB#18:                                # %sw.bb134
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         18
	loop       0
	pred       17
	succ       5
	rli        %r0
	call       skip_segment
	j          ($BB9_5)
$BB9_19:                                # %do.body
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         19
	loop       0
	pred       7
	succ       20
	succ       38
	dom        20
	pdom       7
	rli        %r0
	rli        %v0
	add        %r1, %v0, -65497
	brgtu      %r1, 4, ($BB9_38)
# BB#20:                                # %do.body
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         20
	loop       0
	lext       0
	pred       19
	succ       44
	succ       38
	succ       42
	succ       21
	succ       54
	dom        44
	dom        42
	dom        21
	dom        54
	pdom       19
	rli        %r0
	rli        %r1
	rli        %v0
	sll        %r1, %r1, 2
	mov        %r2, ($JTI9_0)
	mloc       22
	lw         %r1, %r1, %r2
	j         %r1
$BB9_21:                                # %sw.bb60
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         21
	loop       0
	pred       20
	succ       22
	succ       23
	dom        22
	dom        23
	rli        %r0
	call       get_size
	call       FGETC
	mov        %r1, n_comp
	mloc       23
	lw         %r2, %r1, 0
	breq       %v0, %r2, ($BB9_23)
# BB#22:                                # %if.then65
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         22
	loop       0
	pred       21
	succ       23
	rli        %r0
	rli        %r1
	call       aborted_stream
	mloc       24
	lw         %v0, %r1, 0
$BB9_23:                                # %for.cond67.preheader
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         23
	loop       0
	pred       22
	pred       21
	succ       27
	succ       24
	dom        27
	dom        24
	pdom       22
	pdom       21
	rli        %v0
	rli        %r0
	mov        %r1, %ZERO
	brlt       %v0, 1, ($BB9_27)
$BB9_24:                                # %for.body70
                                        #   Parent Loop BB9_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	bb         24
	loop       1
	lhdr       1, 2
	loop       0
	pred       26
	pred       23
	succ       25
	succ       26
	dom        25
	dom        26
	rli        %r1
	rli        %r0
	sll        %r2, %r1, 4
	call       FGETC
	mov        %r3, comp
	mloc       25
	lb         %r4, %r3, %r2
	breq       %v0, %r4, ($BB9_26)
# BB#25:                                # %if.then77
                                        #   in Loop: Header=BB9_24 Depth=2
	bb         25
	loop       1
	loop       0
	pred       24
	succ       26
	rli        %r1
	rli        %r0
	rli        %r3
	rli        %r2
	call       aborted_stream
$BB9_26:                                # %if.end78
                                        #   in Loop: Header=BB9_24 Depth=2
	bb         26
	loop       1
	lext       1
	loop       0
	pred       25
	pred       24
	succ       27
	succ       24
	pdom       25
	pdom       24
	rli        %r1
	rli        %r0
	rli        %r3
	rli        %r2
	add        %r2, %r3, %r2
	call       FGETC
	srl        %r3, %v0, 4
	mloc       26
	sb         %r3, %r2, 7
	and        %r3, %v0, 15
	mloc       27
	sb         %r3, %r2, 8
	add        %r1, %r1, 1
	mov        %r2, n_comp
	mloc       28
	lw         %r2, %r2, 0
	brlt       %r1, %r2, ($BB9_24)
$BB9_27:                                # %for.end88
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         27
	loop       0
	pred       26
	pred       23
	succ       28
	succ       51
	dom        28
	dom        51
	pdom       26
	pdom       23
	rli        %r0
	call       get_size
	call       FGETC
	mov        %r1, MCU_column
	mloc       29
	sw         %ZERO, %r1, 0
	mov        %r1, MCU_row
	mloc       30
	sw         %ZERO, %r1, 0
	call       clear_bits
	call       reset_prediction
	mov        %r2, mx_size
	mloc       31
	lw         %r1, %r2, 0
	mov        %r3, my_size
	mloc       32
	lw         %r4, %r3, 0
	mul        %a0, %r4, %r1
	breq       %r0, 0, ($BB9_51)
# BB#28:                                # %if.then92
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         28
	loop       0
	pred       27
	succ       51
	succ       29
	dom        29
	rli        %a0
	rli        %r0
	rli        %r3
	rli        %r2
	mov        %a1, %r0
	call       ceil_div
	add        %r1, %v0, -1
	mul        %r4, %r1, %r0
	mloc       33
	lw         %r2, %r2, 0
	mloc       34
	lw         %r3, %r3, 0
	mul        %r2, %r3, %r2
	sub       %a0, %r2, %r4
	brlt       %r1, 1, ($BB9_51)
# BB#29:                                # %for.cond102.preheader.lr.ph
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         29
	loop       0
	pred       28
	succ       47
	succ       30
	dom        47
	dom        30
	rli        %a0
	rli        %r0
	rli        %v0
	rli        %r1
	mov        %r2, %ZERO
	brle       %r0, 0, ($BB9_47)
$BB9_30:                                # %for.body105.lr.ph.us
                                        #   Parent Loop BB9_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB9_31 Depth 3
	bb         30
	loop       3
	lhdr       3, 2
	loop       0
	pred       34
	pred       29
	succ       31
	dom        31
	rli        %a0
	rli        %r0
	rli        %r2
	rli        %r1
	mov        %r3, %r0
$BB9_31:                                # %for.body105.us
                                        #   Parent Loop BB9_5 Depth=1
                                        #     Parent Loop BB9_30 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	bb         31
	loop       3
	loop       0
	pred       31
	pred       30
	succ       31
	succ       32
	dom        32
	pdom       30
	rli        %a0
	rli        %r3
	rli        %r0
	rli        %r2
	rli        %r1
	call       process_MCU
	add        %r3, %r3, -1
	brne       %r3, 0, ($BB9_31)
# BB#32:                                # %for.end109.us
                                        #   in Loop: Header=BB9_30 Depth=2
	bb         32
	loop       3
	loop       0
	pred       31
	succ       33
	succ       34
	dom        33
	dom        34
	pdom       31
	rli        %a0
	rli        %r0
	rli        %r2
	rli        %r1
	call       get_next_MK
	and        %r3, %v0, 65528
	breq       %r3, 65488, ($BB9_34)
# BB#33:                                # %if.then114.us
                                        #   in Loop: Header=BB9_30 Depth=2
	bb         33
	loop       3
	loop       0
	pred       32
	succ       34
	rli        %a0
	rli        %r0
	rli        %r2
	rli        %r1
	call       aborted_stream
$BB9_34:                                # %if.end115.us
                                        #   in Loop: Header=BB9_30 Depth=2
	bb         34
	loop       3
	lext       3
	loop       0
	pred       33
	pred       32
	succ       30
	succ       51
	pdom       33
	pdom       32
	rli        %a0
	rli        %r0
	rli        %r2
	rli        %r1
	call       reset_prediction
	call       clear_bits
	add        %r2, %r2, 1
	breq       %r2, %r1, ($BB9_51)
	j          ($BB9_30)
$BB9_35:                                # %do.body
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         35
	loop       0
	pred       8
	succ       38
	succ       36
	dom        36
	rli        %r0
	rli        %v0
	brne       %v0, 65476, ($BB9_38)
# BB#36:                                # %sw.bb45
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         36
	loop       0
	pred       35
	succ       5
	succ       37
	dom        37
	rli        %r0
	call       load_huff_tables
	brne       %v0, -1, ($BB9_5)
# BB#37:                                # %if.then49
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         37
	loop       0
	pred       36
	succ       5
	rli        %r0
	call       aborted_stream
	j          ($BB9_5)
$BB9_38:                                # %sw.default
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         38
	loop       0
	pred       35
	pred       17
	pred       15
	pred       20
	pred       19
	succ       40
	succ       39
	dom        40
	dom        39
	rli        %r0
	rli        %v0
	and        %r1, %v0, 65520
	brne       %r1, 65504, ($BB9_40)
# BB#39:                                # %if.then139
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         39
	loop       0
	pred       38
	succ       5
	rli        %r0
	call       skip_segment
	j          ($BB9_5)
$BB9_40:                                # %if.end140
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         40
	loop       0
	pred       38
	succ       4
	succ       41
	dom        41
	rli        %r0
	rli        %v0
	and        %r1, %v0, 65528
	brne       %r1, 65488, ($BB9_4)
# BB#41:                                # %if.then144
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         41
	loop       0
	pred       40
	succ       5
	rli        %r0
	call       reset_prediction
	j          ($BB9_5)
$BB9_42:                                # %sw.bb51
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         42
	loop       0
	pred       20
	succ       5
	succ       43
	dom        43
	rli        %r0
	call       load_quant_tables
	brne       %v0, -1, ($BB9_5)
# BB#43:                                # %if.then55
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         43
	loop       0
	pred       42
	succ       5
	rli        %r0
	call       aborted_stream
	j          ($BB9_5)
$BB9_44:                                # %sw.bb57
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         44
	loop       0
	pred       20
	succ       5
	call       get_size
	call       get_size
	mov        %r0, %v0
	j          ($BB9_5)
$BB9_45:                                # %if.end31
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         45
	loop       0
	pred       13
	succ       46
	succ       14
	dom        46
	rli        %r0
	rli        %r2
	rli        %v0
	mloc       35
	lw         %r1, %r2, 0
	breq       %r1, 0, ($BB9_14)
# BB#46:                                # %if.end31
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         46
	loop       0
	pred       45
	succ       5
	succ       14
	rli        %r0
	rli        %v0
	brne       %v0, 0, ($BB9_5)
	j          ($BB9_14)
$BB9_47:                                # %for.end109.preheader
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         47
	loop       0
	pred       29
	succ       48
	dom        48
	rli        %a0
	rli        %r0
	rli        %v0
	add        %r1, %v0, -1
$BB9_48:                                # %for.end109
                                        #   Parent Loop BB9_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	bb         48
	loop       2
	lhdr       2, 2
	loop       0
	pred       50
	pred       47
	succ       49
	succ       50
	dom        49
	dom        50
	pdom       47
	rli        %a0
	rli        %r1
	rli        %r0
	call       get_next_MK
	and        %r2, %v0, 65528
	breq       %r2, 65488, ($BB9_50)
# BB#49:                                # %if.then114
                                        #   in Loop: Header=BB9_48 Depth=2
	bb         49
	loop       2
	loop       0
	pred       48
	succ       50
	rli        %a0
	rli        %r1
	rli        %r0
	call       aborted_stream
$BB9_50:                                # %if.end115
                                        #   in Loop: Header=BB9_48 Depth=2
	bb         50
	loop       2
	lext       2
	loop       0
	pred       49
	pred       48
	succ       48
	succ       51
	pdom       49
	pdom       48
	rli        %a0
	rli        %r1
	rli        %r0
	call       reset_prediction
	call       clear_bits
	add        %r1, %r1, -1
	brne       %r1, 0, ($BB9_48)
$BB9_51:                                # %if.end121
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         51
	loop       0
	pred       50
	pred       34
	pred       28
	pred       27
	succ       53
	succ       52
	dom        53
	dom        52
	pdom       50
	pdom       29
	pdom       34
	pdom       28
	pdom       27
	rli        %a0
	rli        %r0
	brlt       %a0, 1, ($BB9_53)
$BB9_52:                                # %for.body125
                                        #   Parent Loop BB9_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	bb         52
	loop       4
	lext       4
	lhdr       4, 2
	loop       0
	pred       52
	pred       51
	succ       52
	succ       53
	rli        %a0
	rli        %r0
	call       process_MCU
	add        %a0, %a0, -1
	brne       %a0, 0, ($BB9_52)
$BB9_53:                                # %for.end129
                                        #   in Loop: Header=BB9_5 Depth=1
	bb         53
	loop       0
	pred       52
	pred       51
	succ       5
	pdom       52
	pdom       51
	rli        %r0
	mov        %r1, in_frame
	mloc       36
	sw         %ZERO, %r1, 0
	j          ($BB9_5)
$BB9_54:                                # %sw.bb130
	bb         54
	pred       20
	succ       55
	succ       56
	dom        55
	dom        56
	pdom       20
	mov        %r0, in_frame
	mloc       37
	lw         %r0, %r0, 0
	breq       %r0, 0, ($BB9_56)
# BB#55:                                # %if.then132
	bb         55
	pred       54
	succ       56
	call       aborted_stream
$BB9_56:                                # %if.end133
	bb         56
	pred       55
	pred       54
	succ       57
	pdom       55
	pdom       54
	call       FCLOSE
	mov        %v0, %ZERO
$BB9_57:                                # %return
	bb         57
	pred       56
	pred       0
	pdom       56
	pdom       0
	rli        %v0
	ret        %RA
	.end       JpegToBmp
$tmp9:
	.size	JpegToBmp, ($tmp9)-JpegToBmp
	.section	.rodata,"a",@progbits
	.align	2
$JTI9_0:
	.long	($BB9_54)
	.long	($BB9_21)
	.long	($BB9_42)
	.long	($BB9_38)
	.long	($BB9_44)

	.text
	.globl	get_bits
	.align	2
	.type	get_bits,@function
	.ent       get_bits             # @get_bits
get_bits:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       1
	rvals      32
	mnum       7
	malias     5, 7
	malias     4, 6
	malias     2, 3
	malias     1, 7
	malias     1, 5
	bb         0
	succ       10
	succ       1
	dom        10
	dom        1
	rli        %a0
	mov        %r0, %ZERO
	brlt       %a0, 1, ($BB10_10)
# BB#1:                                 # %for.body.lr.ph
	bb         1
	pred       0
	succ       2
	dom        2
	rli        %a0
	mov        %r0, bit_count
	mloc       1
	lb         %r2, %r0, 0
	mov        %r0, %ZERO
	mov        %r4, window
$BB10_2:                                # %for.body
                                        # =>This Inner Loop Header: Depth=1
	bb         2
	loop       0
	lhdr       0, 1
	pred       9
	pred       1
	succ       6
	succ       3
	dom        6
	dom        9
	dom        3
	pdom       1
	rli        %r4
	rli        %r0
	rli        %r2
	rli        %a0
	and        %r1, %r2, 255
	brne       %r1, 0, ($BB10_6)
# BB#3:                                 # %if.then3
                                        #   in Loop: Header=BB10_2 Depth=1
	bb         3
	loop       0
	pred       2
	succ       8
	succ       4
	dom        8
	dom        4
	rli        %r4
	rli        %r0
	rli        %a0
	call       FGETC
	mov        %r1, %v0
	and        %r2, %r1, 255
	brne       %r2, 255, ($BB10_8)
# BB#4:                                 # %if.then8
                                        #   in Loop: Header=BB10_2 Depth=1
	bb         4
	loop       0
	pred       3
	succ       7
	succ       5
	dom        7
	dom        5
	rli        %r4
	rli        %r0
	rli        %r1
	rli        %a0
	call       FGETC
	and        %r2, %v0, 255
	brne       %r2, 0, ($BB10_7)
# BB#5:                                 # %sw.bb12
                                        #   in Loop: Header=BB10_2 Depth=1
	bb         5
	loop       0
	pred       4
	succ       8
	rli        %r4
	rli        %r0
	rli        %r1
	rli        %a0
	mov        %r2, stuffers
	mloc       2
	lw         %r3, %r2, 0
	add        %r3, %r3, 1
	mloc       3
	sw         %r3, %r2, 0
	j          ($BB10_8)
$BB10_6:                                # %if.else
                                        #   in Loop: Header=BB10_2 Depth=1
	bb         6
	loop       0
	pred       2
	succ       9
	rli        %r4
	rli        %r0
	rli        %r2
	rli        %a0
	mov        %r1, window
	mloc       4
	lb         %r1, %r1, 0
	j          ($BB10_9)
$BB10_7:                                # %if.then8
                                        #   in Loop: Header=BB10_2 Depth=1
	bb         7
	loop       0
	pred       4
	succ       8
	rli        %r4
	rli        %r0
	rli        %r1
	rli        %a0
	rli        %r2
	call       aborted_stream
$BB10_8:                                # %if.end18
                                        #   in Loop: Header=BB10_2 Depth=1
	bb         8
	loop       0
	pred       7
	pred       5
	pred       3
	succ       9
	pdom       7
	pdom       4
	pdom       5
	pdom       3
	rli        %r4
	rli        %r0
	rli        %r1
	rli        %a0
	mov        %r3, bit_count
	mov        %r2, 8
	mloc       5
	sb         %r2, %r3, 0
$BB10_9:                                # %if.end19
                                        #   in Loop: Header=BB10_2 Depth=1
	bb         9
	loop       0
	lext       0
	pred       8
	pred       6
	succ       2
	succ       10
	pdom       8
	pdom       2
	pdom       6
	rli        %r4
	rli        %r0
	rli        %r1
	rli        %r2
	rli        %a0
	and        %r1, %r1, 255
	sll        %r3, %r1, 1
	mloc       6
	sb         %r3, %r4, 0
	add        %r2, %r2, -1
	mov        %r3, bit_count
	mloc       7
	sb         %r2, %r3, 0
	sll        %r0, %r0, 1
	srl        %r1, %r1, 7
	or         %r0, %r1, %r0
	add        %a0, %a0, -1
	brne       %a0, 0, ($BB10_2)
$BB10_10:                               # %return
	bb         10
	pred       9
	pred       0
	pdom       9
	pdom       0
	rli        %r0
	mov        %v0, %r0
	ret        %RA
	.end       get_bits
$tmp10:
	.size	get_bits, ($tmp10)-get_bits

	.globl	clear_bits
	.align	2
	.type	clear_bits,@function
	.ent       clear_bits           # @clear_bits
clear_bits:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       0
	mnum       1
	bb         0
	mov        %r0, bit_count
	mloc       1
	sb         %ZERO, %r0, 0
	ret        %RA
	.end       clear_bits
$tmp11:
	.size	clear_bits, ($tmp11)-clear_bits

	.globl	get_one_bit
	.align	2
	.type	get_one_bit,@function
	.ent       get_one_bit          # @get_one_bit
get_one_bit:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       0
	rvals      8
	mnum       7
	malias     5, 7
	malias     3, 4
	malias     2, 6
	malias     1, 7
	malias     1, 5
	bb         0
	succ       1
	succ       2
	dom        1
	dom        7
	dom        2
	mov        %r0, bit_count
	mloc       1
	lb         %r0, %r0, 0
	breq       %r0, 0, ($BB12_2)
# BB#1:                                 # %if.else
	bb         1
	pred       0
	succ       7
	rli        %r0
	add        %r1, %r0, -1
	mov        %r0, window
	mloc       2
	lb         %r0, %r0, 0
	j          ($BB12_7)
$BB12_2:                                # %if.then
	bb         2
	pred       0
	succ       6
	succ       3
	dom        6
	dom        3
	call       FGETC
	mov        %r0, %v0
	and        %r1, %r0, 255
	brne       %r1, 255, ($BB12_6)
# BB#3:                                 # %if.then6
	bb         3
	pred       2
	succ       5
	succ       4
	dom        5
	dom        4
	rli        %r0
	call       FGETC
	and        %r1, %v0, 255
	brne       %r1, 0, ($BB12_5)
# BB#4:                                 # %sw.bb10
	bb         4
	pred       3
	succ       6
	rli        %r0
	mov        %r1, stuffers
	mloc       3
	lw         %r2, %r1, 0
	add        %r2, %r2, 1
	mloc       4
	sw         %r2, %r1, 0
	j          ($BB12_6)
$BB12_5:                                # %if.then6
	bb         5
	pred       3
	succ       6
	rli        %r0
	rli        %r1
	call       aborted_stream
$BB12_6:                                # %if.end15
	bb         6
	pred       5
	pred       4
	pred       2
	succ       7
	pdom       5
	pdom       3
	pdom       4
	pdom       2
	rli        %r0
	mov        %r1, bit_count
	mov        %r2, 8
	mloc       5
	sb         %r2, %r1, 0
	mov        %r1, 7
$BB12_7:                                # %if.end16
	bb         7
	pred       6
	pred       1
	pdom       6
	pdom       0
	pdom       1
	rli        %r0
	rli        %r1
	sll        %r2, %r0, 1
	mov        %r3, window
	mloc       6
	sb         %r2, %r3, 0
	mov        %r2, bit_count
	mloc       7
	sb         %r1, %r2, 0
	and        %r0, %r0, 128
	srl        %v0, %r0, 7
	ret        %RA
	.end       get_one_bit
$tmp12:
	.size	get_one_bit, ($tmp12)-get_one_bit

	.globl	get_size
	.align	2
	.type	get_size,@function
	.ent       get_size             # @get_size
get_size:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       0
	rvals      32
	bb         0
	call       FGETC
	sll        %r0, %v0, 8
	and        %r0, %r0, 65280
	call       FGETC
	or         %v0, %r0, %v0
	ret        %RA
	.end       get_size
$tmp13:
	.size	get_size, ($tmp13)-get_size

	.globl	skip_segment
	.align	2
	.type	skip_segment,@function
	.ent       skip_segment         # @skip_segment
skip_segment:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       0
	bb         0
	succ       2
	succ       1
	dom        2
	dom        1
	call       FGETC
	sll        %r0, %v0, 8
	and        %r0, %r0, 65280
	call       FGETC
	or         %r0, %r0, %v0
	brltu      %r0, 6, ($BB14_2)
	j          ($BB14_1)
$BB14_1:                                # %for.cond.preheader
	bb         1
	pred       0
	succ       2
	rli        %r0
	call       FGETC
	call       FGETC
	call       FGETC
	call       FGETC
	add        %r0, %r0, -4
$BB14_2:                                # %if.end
	bb         2
	pred       1
	pred       0
	pdom       1
	pdom       0
	rli        %r0
	add        %a0, %r0, -2
	mov        %a1, 1
	call       FSEEK
	ret        %RA
	.end       skip_segment
$tmp14:
	.size	skip_segment, ($tmp14)-skip_segment

	.globl	get_next_MK
	.align	2
	.type	get_next_MK,@function
	.ent       get_next_MK          # @get_next_MK
get_next_MK:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       0
	rvals      32
	mnum       3
	malias     2, 3
	malias     1, 3
	malias     1, 2
	bb         0
	succ       2
	dom        2
	mov        %r1, passed
	mloc       1
	lw         %r0, %r1, 0
	add        %r3, %r0, -1
	mov        %r2, %ZERO
	j          ($BB15_2)
$BB15_1:                                # %sw.epilog
                                        #   in Loop: Header=BB15_2 Depth=1
	bb         1
	loop       0
	pred       6
	pred       5
	pred       3
	succ       2
	pdom       5
	rli        %r0
	rli        %r1
	mov        %r2, passed
	mloc       2
	lw         %r2, %r2, 0
	add        %r3, %r2, 1
	mov        %r2, %r0
$BB15_2:                                # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	bb         2
	loop       0
	lext       0
	lhdr       0, 1
	pred       1
	pred       0
	succ       3
	succ       8
	dom        3
	dom        8
	pdom       1
	pdom       0
	rli        %r2
	rli        %r3
	rli        %r1
	mloc       3
	sw         %r3, %r1, 0
	call       FGETC
	mov        %r0, -1
	breq       %v0, -1, ($BB15_8)
# BB#3:                                 # %while.cond
                                        #   in Loop: Header=BB15_2 Depth=1
	bb         3
	loop       0
	pred       2
	succ       4
	succ       1
	dom        4
	dom        1
	rli        %r2
	rli        %r1
	rli        %v0
	mov        %r0, 1
	breq       %v0, 255, ($BB15_1)
# BB#4:                                 # %while.cond
                                        #   in Loop: Header=BB15_2 Depth=1
	bb         4
	loop       0
	pred       3
	succ       6
	succ       5
	dom        6
	dom        5
	rli        %r2
	rli        %r1
	rli        %v0
	brne       %v0, 0, ($BB15_6)
# BB#5:                                 # %sw.bb1
                                        #   in Loop: Header=BB15_2 Depth=1
	bb         5
	loop       0
	pred       4
	succ       1
	rli        %r1
	mov        %r0, %ZERO
	j          ($BB15_1)
$BB15_6:                                # %sw.default
                                        #   in Loop: Header=BB15_2 Depth=1
	bb         6
	loop       0
	lext       0
	pred       4
	succ       7
	succ       1
	dom        7
	rli        %r2
	rli        %r1
	rli        %v0
	mov        %r0, %ZERO
	breq       %r2, 0, ($BB15_1)
# BB#7:                                 # %if.then3
	bb         7
	pred       6
	succ       8
	rli        %v0
	or         %r0, %v0, 65280
$BB15_8:                                # %return
	bb         8
	pred       7
	pred       2
	pdom       7
	pdom       6
	pdom       4
	pdom       3
	pdom       2
	rli        %r0
	mov        %v0, %r0
	ret        %RA
	.end       get_next_MK
$tmp15:
	.size	get_next_MK, ($tmp15)-get_next_MK

	.globl	load_quant_tables
	.align	2
	.type	load_quant_tables,@function
	.ent       load_quant_tables    # @load_quant_tables
load_quant_tables:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       0
	rvals      32
	mnum       4
	malias     3, 4
	malias     2, 4
	malias     1, 4
	malias     1, 3
	bb         0
	succ       7
	succ       1
	dom        7
	dom        1
	call       FGETC
	sll        %r0, %v0, 8
	and        %r0, %r0, 65280
	call       FGETC
	or         %r0, %r0, %v0
	add        %a0, %r0, -2
	mov        %a1, 65
	call       __udivsi3
	mov        %r0, %v0
	mov        %r2, %ZERO
	mov        %v0, %ZERO
	brltu      %a0, 65, ($BB16_7)
	j          ($BB16_1)
$BB16_1:                                # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_5 Depth 2
	bb         1
	loop       0
	lext       0
	lhdr       0, 1
	pred       6
	pred       0
	succ       2
	succ       7
	dom        2
	rli        %r2
	rli        %r0
	call       FGETC
	mov        %r1, %v0
	sll        %r3, %r1, 24
	sra        %r3, %r3, 28
	mov        %v0, -1
	brgt       %r3, 0, ($BB16_7)
# BB#2:                                 # %if.end
                                        #   in Loop: Header=BB16_1 Depth=1
	bb         2
	loop       0
	pred       1
	succ       4
	succ       3
	dom        4
	dom        3
	rli        %r2
	rli        %r1
	rli        %r0
	and        %r3, %r1, 15
	mov        %r1, 64
	mov        %a0, %r1
	call       malloc
	sll        %r3, %r3, 2
	mov        %r4, QTable
	mloc       1
	sw         %v0, %r4, %r3
	brne       %v0, 0, ($BB16_4)
# BB#3:                                 # %if.then10
                                        #   in Loop: Header=BB16_1 Depth=1
	bb         3
	loop       0
	pred       2
	succ       4
	rli        %r1
	rli        %r2
	rli        %r3
	rli        %r0
	mov        %a0, 1
	call       exit
$BB16_4:                                # %if.end11
                                        #   in Loop: Header=BB16_1 Depth=1
	bb         4
	loop       0
	pred       3
	pred       2
	succ       5
	dom        5
	pdom       3
	pdom       2
	rli        %r1
	rli        %r2
	rli        %r3
	rli        %r0
	mov        %r4, QTvalid
	mov        %r5, 1
	mloc       2
	sw         %r5, %r4, %r3
$BB16_5:                                # %for.body16
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	bb         5
	loop       1
	lext       1
	lhdr       1, 2
	loop       0
	pred       5
	pred       4
	succ       5
	succ       6
	dom        6
	pdom       4
	rli        %r1
	rli        %r2
	rli        %r3
	rli        %r0
	call       FGETC
	mov        %r4, QTable
	mloc       3
	lw         %r4, %r4, %r3
	sub       %r4, %r4, %r1
	mloc       4
	sb         %v0, %r4, 64
	add        %r1, %r1, -1
	brne       %r1, 0, ($BB16_5)
# BB#6:                                 # %for.inc21
                                        #   in Loop: Header=BB16_1 Depth=1
	bb         6
	loop       0
	lext       0
	pred       5
	succ       7
	succ       1
	pdom       5
	rli        %r2
	rli        %r0
	add        %r2, %r2, 1
	mov        %v0, %ZERO
	brltu      %r2, %r0, ($BB16_1)
	j          ($BB16_7)
$BB16_7:                                # %return
	bb         7
	pred       6
	pred       1
	pred       0
	pdom       6
	pdom       1
	pdom       0
	rli        %v0
	ret        %RA
	.end       load_quant_tables
$tmp16:
	.size	load_quant_tables, ($tmp16)-load_quant_tables

	.globl	init_MCU
	.align	2
	.type	init_MCU,@function
	.ent       init_MCU             # @init_MCU
init_MCU:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       0
	rvals      32
	mnum       36
	malias     29, 34
	malias     28, 35
	malias     26, 31
	malias     25, 35
	malias     25, 28
	malias     24, 32
	malias     19, 35
	malias     19, 28
	malias     19, 25
	malias     18, 32
	malias     18, 24
	malias     13, 20
	malias     12, 22
	malias     11, 17
	malias     10, 15
	malias     9, 15
	malias     8, 15
	malias     7, 15
	malias     6, 15
	malias     5, 15
	malias     4, 15
	malias     3, 15
	malias     2, 15
	malias     1, 15
	bb         0
	succ       13
	succ       1
	dom        13
	dom        15
	dom        14
	dom        1
	mov        %r0, MCU_valid
	mov        %r1, -1
	mloc       1
	sw         %r1, %r0, 0
	mloc       2
	sw         %r1, %r0, 4
	mloc       3
	sw         %r1, %r0, 8
	mloc       4
	sw         %r1, %r0, 12
	mloc       5
	sw         %r1, %r0, 16
	mloc       6
	sw         %r1, %r0, 20
	mloc       7
	sw         %r1, %r0, 24
	mloc       8
	sw         %r1, %r0, 28
	mloc       9
	sw         %r1, %r0, 32
	mloc       10
	sw         %r1, %r0, 36
	mov        %r0, n_comp
	mloc       11
	lw         %r3, %r0, 0
	brle       %r3, 0, ($BB17_13)
# BB#1:
	bb         1
	pred       0
	succ       2
	dom        2
	rli        %r3
	mov        %r0, %ZERO
	mov        %r1, %ZERO
	mov        %r2, %ZERO
	mov        %r4, %ZERO
$BB17_2:                                # %for.body3
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_4 Depth 2
	bb         2
	loop       1
	lhdr       1, 1
	pred       1
	pred       9
	succ       3
	succ       9
	dom        3
	dom        9
	pdom       1
	rli        %r3
	rli        %r4
	rli        %r2
	rli        %r1
	rli        %r0
	sll        %r5, %r4, 4
	mov        %r6, comp
	add        %r7, %r6, %r5
	mloc       12
	lb         %r5, %r7, 3
	mloc       13
	lb         %r6, %r7, 2
	mloc       14
	sb         %r2, %r7, 1
	mul        %r7, %r5, %r6
	breq       %r7, 0, ($BB17_9)
# BB#3:                                 # %for.body30.preheader
                                        #   in Loop: Header=BB17_2 Depth=1
	bb         3
	loop       1
	pred       2
	succ       4
	dom        4
	rli        %r4
	rli        %r2
	rli        %r1
	rli        %r0
	rli        %r6
	rli        %r5
	rli        %r7
	sll        %r8, %r2, 2
	mov        %r3, MCU_valid
	add        %r3, %r3, %r8
	mov        %r9, MCU_buff
	add        %r8, %r9, %r8
	mov        %r9, %ZERO
$BB17_4:                                # %for.body30
                                        #   Parent Loop BB17_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	bb         4
	loop       2
	lhdr       2, 2
	loop       1
	pred       7
	pred       3
	succ       6
	succ       5
	dom        6
	dom        5
	pdom       3
	rli        %r9
	rli        %r4
	rli        %r2
	rli        %r1
	rli        %r0
	rli        %r6
	rli        %r5
	rli        %r3
	rli        %r8
	rli        %r7
	sll        %r10, %r9, 2
	mloc       15
	sw         %r4, %r3, %r10
	mov        %a0, 64
	call       malloc
	mloc       16
	sw         %v0, %r8, %r10
	brne       %v0, 0, ($BB17_6)
# BB#5:                                 # %if.then36
                                        #   in Loop: Header=BB17_4 Depth=2
	bb         5
	loop       2
	loop       1
	pred       4
	succ       6
	rli        %r9
	rli        %r4
	rli        %r2
	rli        %r1
	rli        %r0
	rli        %r6
	rli        %r5
	rli        %r3
	rli        %r8
	rli        %r7
	mov        %a0, 1
	call       exit
$BB17_6:                                # %if.end37
                                        #   in Loop: Header=BB17_4 Depth=2
	bb         6
	loop       2
	lext       2
	loop       1
	lext       1
	pred       5
	pred       4
	succ       7
	succ       15
	dom        7
	pdom       5
	pdom       4
	rli        %r9
	rli        %r4
	rli        %r2
	rli        %r1
	rli        %r0
	rli        %r6
	rli        %r5
	rli        %r3
	rli        %r8
	rli        %r7
	add        %r10, %r2, %r9
	mov        %v0, -1
	breq       %r10, 9, ($BB17_15)
# BB#7:                                 # %for.cond27
                                        #   in Loop: Header=BB17_4 Depth=2
	bb         7
	loop       2
	lext       2
	loop       1
	pred       6
	succ       8
	succ       4
	dom        8
	rli        %r9
	rli        %r4
	rli        %r2
	rli        %r1
	rli        %r0
	rli        %r6
	rli        %r5
	rli        %r3
	rli        %r8
	rli        %r7
	add        %r9, %r9, 1
	brlt       %r9, %r7, ($BB17_4)
# BB#8:                                 # %for.cond27.for.inc46_crit_edge
                                        #   in Loop: Header=BB17_2 Depth=1
	bb         8
	loop       1
	pred       7
	succ       9
	rli        %r9
	rli        %r4
	rli        %r2
	rli        %r1
	rli        %r0
	rli        %r6
	rli        %r5
	add        %r2, %r2, %r9
	mov        %r3, n_comp
	mloc       17
	lw         %r3, %r3, 0
$BB17_9:                                # %for.inc46
                                        #   in Loop: Header=BB17_2 Depth=1
	bb         9
	loop       1
	lext       1
	pred       2
	pred       8
	succ       10
	succ       2
	dom        10
	pdom       8
	rli        %r3
	rli        %r4
	rli        %r2
	rli        %r1
	rli        %r0
	rli        %r6
	rli        %r5
	max        %r0, %r5, %r0
	max        %r1, %r6, %r1
	add        %r4, %r4, 1
	brlt       %r4, %r3, ($BB17_2)
# BB#10:                                # %for.end48
	bb         10
	pred       9
	succ       14
	succ       11
	dom        11
	rli        %r3
	rli        %r1
	rli        %r0
	sll        %r2, %r1, 3
	mov        %r4, MCU_sx
	mloc       18
	sw         %r2, %r4, 0
	sll        %r4, %r0, 3
	mov        %r5, MCU_sy
	mloc       19
	sw         %r4, %r5, 0
	brlt       %r3, 1, ($BB17_14)
# BB#11:
	bb         11
	pred       10
	succ       12
	dom        12
	rli        %r2
	rli        %r3
	rli        %r1
	rli        %r0
	mov        %r4, %ZERO
$BB17_12:                               # %for.body54
                                        # =>This Inner Loop Header: Depth=1
	bb         12
	loop       0
	lext       0
	lhdr       0, 1
	pred       11
	pred       12
	succ       14
	succ       12
	pdom       11
	rli        %r2
	rli        %r4
	rli        %r3
	rli        %r1
	rli        %r0
	sll        %r5, %r4, 4
	mov        %r6, comp
	add        %r5, %r6, %r5
	mloc       20
	lb         %a1, %r5, 2
	mov        %a0, %r1
	call       __divsi3
	sel_le     %r6, %v0, 1, %ZERO, 1
	mloc       21
	sb         %r6, %r5, 4
	mloc       22
	lb         %a1, %r5, 3
	mov        %a0, %r0
	call       __divsi3
	sel_le     %r6, %v0, 1, %ZERO, 1
	mloc       23
	sb         %r6, %r5, 5
	add        %r4, %r4, 1
	brlt       %r4, %r3, ($BB17_12)
	j          ($BB17_14)
$BB17_13:                               # %for.end48.thread
	bb         13
	pred       0
	succ       14
	mov        %r0, MCU_sx
	mloc       24
	sw         %ZERO, %r0, 0
	mov        %r0, MCU_sy
	mloc       25
	sw         %ZERO, %r0, 0
	mov        %r2, %ZERO
$BB17_14:                               # %for.end72
	bb         14
	pred       12
	pred       10
	pred       13
	succ       15
	pdom       12
	pdom       10
	pdom       13
	rli        %r2
	mov        %r1, x_size
	mloc       26
	lw         %a0, %r1, 0
	mov        %a1, %r2
	call       ceil_div
	mov        %r0, mx_size
	mloc       27
	sw         %v0, %r0, 0
	mov        %r0, MCU_sy
	mloc       28
	lw         %a1, %r0, 0
	mov        %r2, y_size
	mloc       29
	lw         %a0, %r2, 0
	call       ceil_div
	mov        %r3, my_size
	mloc       30
	sw         %v0, %r3, 0
	mloc       31
	lw         %a0, %r1, 0
	mov        %r1, MCU_sx
	mloc       32
	lw         %a1, %r1, 0
	call       floor_div
	mul        %r1, %v0, %a1
	mov        %r3, rx_size
	mloc       33
	sw         %r1, %r3, 0
	mloc       34
	lw         %a0, %r2, 0
	mloc       35
	lw         %a1, %r0, 0
	call       floor_div
	mul        %r0, %v0, %a1
	mov        %r1, ry_size
	mloc       36
	sw         %r0, %r1, 0
	mov        %v0, %ZERO
$BB17_15:                               # %return
	bb         15
	pred       14
	pred       6
	pdom       14
	pdom       0
	pdom       7
	pdom       9
	pdom       2
	pdom       6
	rli        %v0
	ret        %RA
	.end       init_MCU
$tmp17:
	.size	init_MCU, ($tmp17)-init_MCU

	.globl	process_MCU
	.align	2
	.type	process_MCU,@function
	.ent       process_MCU          # @process_MCU
process_MCU:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       0
	rvals      32
	mnum       39
	malias     38, 39
	malias     33, 36
	malias     30, 34
	malias     29, 34
	malias     29, 30
	malias     27, 35
	malias     25, 39
	malias     25, 38
	malias     24, 32
	malias     22, 31
	malias     19, 37
	malias     17, 36
	malias     17, 33
	malias     14, 15
	malias     12, 18
	malias     11, 15
	malias     11, 14
	malias     10, 13
	malias     9, 16
	malias     8, 15
	malias     8, 14
	malias     8, 11
	malias     6, 23
	malias     5, 31
	malias     5, 22
	malias     4, 31
	malias     4, 22
	malias     4, 5
	malias     3, 39
	malias     3, 38
	malias     3, 25
	malias     2, 39
	malias     2, 38
	malias     2, 25
	malias     2, 3
	malias     1, 28
	bb         0
	succ       3
	succ       1
	dom        3
	dom        1
	mov        %r0, mx_size
	mloc       1
	lw         %r1, %r0, 0
	mov        %r0, MCU_column
	mloc       2
	lw         %r2, %r0, 0
	brne       %r2, %r1, ($BB18_3)
# BB#1:                                 # %if.then
	bb         1
	pred       0
	succ       3
	succ       2
	dom        2
	rli        %r0
	mloc       3
	sw         %ZERO, %r0, 0
	mov        %r1, MCU_row
	mloc       4
	lw         %r0, %r1, 0
	add        %r0, %r0, 1
	mloc       5
	sw         %r0, %r1, 0
	mov        %r1, my_size
	mloc       6
	lw         %r1, %r1, 0
	brne       %r0, %r1, ($BB18_3)
# BB#2:                                 # %if.then2
	bb         2
	pred       1
	mov        %r0, in_frame
	mloc       7
	sw         %ZERO, %r0, 0
	mov        %v0, %ZERO
	ret        %RA
$BB18_3:                                # %for.cond.preheader
	bb         3
	pred       1
	pred       0
	succ       4
	succ       6
	dom        4
	dom        6
	mov        %r0, curcomp
	mloc       8
	sw         %ZERO, %r0, 0
	mov        %r0, MCU_valid
	mloc       9
	lw         %a1, %r0, 0
	breq       %a1, -1, ($BB18_6)
# BB#4:
	bb         4
	pred       3
	succ       5
	dom        5
	rli        %a1
	mov        %r3, MCU_buff
$BB18_5:                                # %for.body
                                        # =>This Inner Loop Header: Depth=1
	bb         5
	loop       1
	lext       1
	lhdr       1, 1
	pred       4
	pred       5
	succ       5
	succ       6
	pdom       4
	rli        %r3
	rli        %a1
	mov        %r1, FBuff
	mloc       10
	lw         %a0, %r1, 0
	call       unpack_block
	mov        %r0, curcomp
	mloc       11
	lw         %r2, %r0, 0
	sll        %r2, %r2, 2
	mloc       12
	lw         %a1, %r3, %r2
	mloc       13
	lw         %a0, %r1, 0
	call       IDCT
	mloc       14
	lw         %r1, %r0, 0
	add        %r1, %r1, 1
	mloc       15
	sw         %r1, %r0, 0
	sll        %r0, %r1, 2
	mov        %r1, MCU_valid
	mloc       16
	lw         %a1, %r1, %r0
	brne       %a1, -1, ($BB18_5)
$BB18_6:                                # %for.end
	bb         6
	pred       5
	pred       3
	succ       8
	succ       7
	dom        8
	dom        9
	dom        7
	pdom       5
	pdom       3
	mov        %r0, n_comp
	mloc       17
	lw         %r0, %r0, 0
	brlt       %r0, 2, ($BB18_8)
# BB#7:                                 # %if.then9
	bb         7
	pred       6
	succ       9
	call       color_conversion
	j          ($BB18_9)
$BB18_8:                                # %if.else
	bb         8
	pred       6
	succ       9
	mov        %r0, MCU_buff
	mloc       18
	lw         %a1, %r0, 0
	mov        %r0, ColorBuffer
	mloc       19
	lw         %a0, %r0, 0
	mov        %a2, 64
	call       memmove
$BB18_9:                                # %if.end10
	bb         9
	pred       7
	pred       8
	succ       10
	succ       12
	dom        10
	dom        13
	dom        12
	pdom       7
	pdom       6
	pdom       8
	mov        %r0, ry_size
	mloc       20
	lw         %r0, %r0, 0
	mov        %r1, y_size
	mloc       21
	lw         %r1, %r1, 0
	breq       %r1, %r0, ($BB18_12)
# BB#10:                                # %land.lhs.true
	bb         10
	pred       9
	succ       12
	succ       11
	dom        11
	rli        %r0
	rli        %r1
	mov        %r2, MCU_row
	mloc       22
	lw         %r2, %r2, 0
	mov        %r3, my_size
	mloc       23
	lw         %r3, %r3, 0
	add        %r3, %r3, -1
	brne       %r2, %r3, ($BB18_12)
# BB#11:                                # %if.then13
	bb         11
	pred       10
	succ       13
	rli        %r0
	rli        %r1
	sub       %r2, %r1, %r0
	j          ($BB18_13)
$BB18_12:                               # %if.else15
	bb         12
	pred       10
	pred       9
	succ       13
	mov        %r0, MCU_sy
	mloc       24
	lw         %r2, %r0, 0
$BB18_13:                               # %if.end16
	bb         13
	pred       12
	pred       11
	succ       14
	succ       16
	dom        14
	dom        17
	dom        16
	pdom       12
	pdom       9
	pdom       10
	pdom       11
	rli        %r2
	mov        %r0, MCU_column
	mloc       25
	lw         %r4, %r0, 0
	mov        %r0, rx_size
	mloc       26
	lw         %r0, %r0, 0
	mov        %r1, x_size
	mloc       27
	lw         %r1, %r1, 0
	breq       %r1, %r0, ($BB18_16)
# BB#14:                                # %land.lhs.true18
	bb         14
	pred       13
	succ       16
	succ       15
	dom        15
	rli        %r4
	rli        %r1
	rli        %r2
	rli        %r0
	mov        %r3, mx_size
	mloc       28
	lw         %r3, %r3, 0
	add        %r3, %r3, -1
	brne       %r4, %r3, ($BB18_16)
# BB#15:                                # %if.then21
	bb         15
	pred       14
	succ       17
	rli        %r4
	rli        %r1
	rli        %r2
	rli        %r0
	sub       %r0, %r1, %r0
	mov        %r3, MCU_sx
	mloc       29
	lw         %r3, %r3, 0
	j          ($BB18_17)
$BB18_16:                               # %if.else23
	bb         16
	pred       14
	pred       13
	succ       17
	rli        %r4
	rli        %r1
	rli        %r2
	mov        %r0, MCU_sx
	mloc       30
	lw         %r3, %r0, 0
	mov        %r0, %r3
$BB18_17:                               # %if.end24
	bb         17
	pred       16
	pred       15
	succ       22
	succ       18
	dom        22
	dom        18
	pdom       16
	pdom       13
	pdom       14
	pdom       15
	rli        %r4
	rli        %r1
	rli        %r0
	rli        %r3
	rli        %r2
	brlt       %r2, 1, ($BB18_22)
# BB#18:                                # %for.body30.preheader
	bb         18
	pred       17
	succ       20
	dom        20
	rli        %r4
	rli        %r1
	rli        %r0
	rli        %r3
	rli        %r2
	mul        %r4, %r3, %r4
	mov        %r5, MCU_row
	mloc       31
	lw         %r5, %r5, 0
	mov        %r6, MCU_sy
	mloc       32
	lw         %r6, %r6, 0
	mul        %r5, %r6, %r5
	mul        %r5, %r5, %r1
	add        %r4, %r4, %r5
	mov        %r5, n_comp
	mloc       33
	lw         %r6, %r5, 0
	mul        %r4, %r4, %r6
	add        %r2, %r2, -1
	mov        %r5, %ZERO
	j          ($BB18_20)
$BB18_19:                               # %for.body30.for.body30_crit_edge
                                        #   in Loop: Header=BB18_20 Depth=1
	bb         19
	loop       0
	pred       20
	succ       20
	rli        %r5
	rli        %r0
	rli        %r2
	rli        %r4
	add        %r5, %r5, 1
	mov        %r1, MCU_sx
	mloc       34
	lw         %r3, %r1, 0
	mov        %r1, x_size
	mloc       35
	lw         %r1, %r1, 0
	mov        %r6, n_comp
	mloc       36
	lw         %r6, %r6, 0
$BB18_20:                               # %for.body30
                                        # =>This Inner Loop Header: Depth=1
	bb         20
	loop       0
	lext       0
	lhdr       0, 1
	pred       19
	pred       18
	succ       19
	succ       21
	dom        19
	dom        21
	pdom       19
	pdom       18
	rli        %r5
	rli        %r6
	rli        %r1
	rli        %r0
	rli        %r3
	rli        %r2
	rli        %r4
	mul        %a2, %r6, %r0
	mul        %r6, %r6, %r5
	mul        %r3, %r3, %r6
	mov        %r7, ColorBuffer
	mloc       37
	lw         %r7, %r7, 0
	add        %a1, %r7, %r3
	mul        %r1, %r6, %r1
	add        %r1, %r1, %r4
	mov        %r3, FrameBuffer
	add        %a0, %r3, %r1
	call       memmove
	brne       %r2, %r5, ($BB18_19)
# BB#21:                                # %for.cond28.for.end41_crit_edge
	bb         21
	pred       20
	succ       22
	pdom       20
	mov        %r0, MCU_column
	mloc       38
	lw         %r4, %r0, 0
$BB18_22:                               # %for.end41
	bb         22
	pred       17
	pred       21
	pdom       17
	pdom       21
	rli        %r4
	add        %r0, %r4, 1
	mov        %r1, MCU_column
	mloc       39
	sw         %r0, %r1, 0
	mov        %v0, 1
	ret        %RA
	.end       process_MCU
$tmp18:
	.size	process_MCU, ($tmp18)-process_MCU

	.globl	load_huff_tables
	.align	2
	.type	load_huff_tables,@function
	.ent       load_huff_tables     # @load_huff_tables
load_huff_tables:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       0
	rvals      32
	mnum       5
	malias     4, 5
	malias     3, 5
	malias     2, 5
	malias     1, 5
	bb         0
	succ       11
	succ       1
	dom        11
	dom        1
	call       get_size
	add        %r1, %v0, -2
	mov        %v0, %ZERO
	brlt       %r1, 1, ($BB19_11)
# BB#1:
	bb         1
	pred       0
	succ       2
	dom        2
	rli        %r1
	mov        %r10, -1
$BB19_2:                                # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_4 Depth 2
                                        #     Child Loop BB19_7 Depth 2
                                        #     Child Loop BB19_9 Depth 2
	bb         2
	loop       0
	lext       0
	lhdr       0, 1
	pred       1
	pred       10
	succ       3
	succ       11
	dom        3
	pdom       1
	rli        %r10
	rli        %r1
	call       FGETC
	mov        %r0, %v0
	and        %r2, %r0, 15
	mov        %v0, -1
	brgtu      %r2, 1, ($BB19_11)
	j          ($BB19_3)
$BB19_3:                                # %if.end
                                        #   in Loop: Header=BB19_2 Depth=1
	bb         3
	loop       0
	pred       2
	succ       4
	dom        4
	rli        %r10
	rli        %r1
	rli        %r0
	rli        %r2
	sll        %r0, %r0, 24
	sra        %r3, %r0, 28
	sll        %r0, %r3, 1
	add        %r2, %r0, %r2
	sll        %r0, %r2, 6
	mov        %r4, ValPtr
	add        %r4, %r4, %r0
	mov        %r5, MinCode
	add        %r6, %r5, %r0
	mov        %r5, MaxCode
	add        %r7, %r5, %r0
	mov        %r8, %ZERO
	mov        %r9, %ZERO
	mov        %r0, %ZERO
$BB19_4:                                # %for.body
                                        #   Parent Loop BB19_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	bb         4
	loop       1
	lext       1
	lhdr       1, 2
	loop       0
	pred       4
	pred       3
	succ       4
	succ       5
	dom        5
	pdom       3
	rli        %r10
	rli        %r0
	rli        %r9
	rli        %r8
	rli        %r1
	rli        %r4
	rli        %r6
	rli        %r7
	rli        %r2
	rli        %r3
	mov        %r5, %r0
	call       FGETC
	mloc       1
	sw         %r5, %r4, %r8
	mloc       2
	sw         %r9, %r6, %r8
	add        %r9, %v0, %r9
	add        %r0, %r9, -1
	sel_eq      %r0, %v0, 0, %r10, %r0
	mloc       3
	sw         %r0, %r7, %r8
	add        %r0, %v0, %r5
	sll        %r9, %r9, 1
	add        %r8, %r8, 4
	brne       %r8, 64, ($BB19_4)
# BB#5:                                 # %for.end
                                        #   in Loop: Header=BB19_2 Depth=1
	bb         5
	loop       0
	pred       4
	succ       8
	succ       6
	dom        8
	dom        6
	pdom       4
	rli        %r10
	rli        %r0
	rli        %r1
	rli        %v0
	rli        %r5
	rli        %r2
	rli        %r3
	mov        %r4, 162
	sel_ne     %r4, %r3, 0, %r4, 14
	sel_gt      %r3, %r0, %r4, %r4, %r0
	brlt       %r3, 1, ($BB19_8)
# BB#6:                                 # %for.body32.lr.ph
                                        #   in Loop: Header=BB19_2 Depth=1
	bb         6
	loop       0
	pred       5
	succ       7
	dom        7
	rli        %r10
	rli        %r3
	rli        %r0
	rli        %r1
	rli        %v0
	rli        %r4
	rli        %r5
	rli        %r2
	sll        %r2, %r2, 2
	mov        %r6, HTable
	mloc       4
	lw         %r2, %r6, %r2
	add        %r5, %v0, %r5
	xor        %r5, %r5, 4294967295
	xor        %r6, %r4, 4294967295
	max        %r5, %r6, %r5
	xor        %r5, %r5, 4294967295
$BB19_7:                                # %for.body32
                                        #   Parent Loop BB19_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	bb         7
	loop       2
	lext       2
	lhdr       2, 2
	loop       0
	pred       7
	pred       6
	succ       7
	succ       8
	pdom       6
	rli        %r10
	rli        %r3
	rli        %r5
	rli        %r2
	rli        %r0
	rli        %r1
	rli        %r4
	call       FGETC
	mloc       5
	sb         %v0, %r2, 0
	add        %r2, %r2, 1
	add        %r5, %r5, -1
	brne       %r5, 0, ($BB19_7)
$BB19_8:                                # %for.cond40.loopexit
                                        #   in Loop: Header=BB19_2 Depth=1
	bb         8
	loop       0
	pred       7
	pred       5
	succ       10
	succ       9
	dom        10
	dom        9
	pdom       7
	pdom       5
	rli        %r10
	rli        %r3
	rli        %r0
	rli        %r1
	rli        %r4
	brle       %r0, %r4, ($BB19_10)
$BB19_9:                                # %for.body43
                                        #   Parent Loop BB19_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	bb         9
	loop       3
	lext       3
	lhdr       3, 2
	loop       0
	pred       9
	pred       8
	succ       10
	succ       9
	rli        %r10
	rli        %r3
	rli        %r0
	rli        %r1
	call       FGETC
	add        %r3, %r3, 1
	brlt       %r3, %r0, ($BB19_9)
$BB19_10:                               # %for.end47
                                        #   in Loop: Header=BB19_2 Depth=1
	bb         10
	loop       0
	lext       0
	pred       9
	pred       8
	succ       11
	succ       2
	pdom       9
	pdom       8
	rli        %r10
	rli        %r0
	rli        %r1
	add        %r1, %r1, -17
	sub       %r1, %r1, %r0
	mov        %v0, %ZERO
	brgt       %r1, 0, ($BB19_2)
$BB19_11:                               # %return
	bb         11
	pred       10
	pred       2
	pred       0
	pdom       10
	pdom       2
	pdom       0
	rli        %v0
	ret        %RA
	.end       load_huff_tables
$tmp19:
	.size	load_huff_tables, ($tmp19)-load_huff_tables

	.globl	get_symbol
	.align	2
	.type	get_symbol,@function
	.ent       get_symbol           # @get_symbol
get_symbol:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       1
	rvals      8
	mnum       5
	malias     4, 5
	malias     3, 5
	malias     2, 5
	malias     1, 5
	bb         0
	succ       1
	dom        1
	rli        %a0
	sll        %r0, %a0, 6
	mov        %r1, MaxCode
	add        %r3, %r1, %r0
	mov        %r1, %ZERO
	mov        %r2, %ZERO
$BB20_1:                                # %for.body
                                        # =>This Inner Loop Header: Depth=1
	bb         1
	loop       0
	lext       0
	lhdr       0, 1
	pred       2
	pred       0
	succ       3
	succ       2
	dom        3
	dom        2
	pdom       0
	rli        %r2
	rli        %r1
	rli        %r0
	rli        %a0
	rli        %r3
	sll        %r2, %r2, 1
	call       get_one_bit
	or         %r2, %v0, %r2
	sll        %r4, %r1, 2
	mloc       1
	lw         %r4, %r3, %r4
	brle       %r2, %r4, ($BB20_3)
# BB#2:                                 # %for.cond
                                        #   in Loop: Header=BB20_1 Depth=1
	bb         2
	loop       0
	lext       0
	pred       1
	succ       3
	succ       1
	rli        %r2
	rli        %r1
	rli        %r0
	rli        %a0
	rli        %r3
	add        %r1, %r1, 1
	brle       %r1, 15, ($BB20_1)
$BB20_3:                                # %for.end
	bb         3
	pred       1
	pred       2
	succ       5
	succ       4
	dom        5
	dom        4
	pdom       1
	pdom       2
	rli        %r2
	rli        %r1
	rli        %r0
	rli        %a0
	mov        %r3, MinCode
	add        %r4, %r3, %r0
	sll        %r3, %r1, 2
	mloc       2
	lw         %r1, %r4, %r3
	mov        %r4, ValPtr
	add        %r0, %r4, %r0
	mloc       3
	lw         %r0, %r0, %r3
	add        %r0, %r0, %r2
	sub       %r0, %r0, %r1
	add        %r1, %a0, 1
	mov        %r2, 162
	sel_gtu    %r2, %r1, 2, %r2, 14
	mov        %r1, %ZERO
	brge       %r0, %r2, ($BB20_5)
# BB#4:                                 # %if.then10
	bb         4
	pred       3
	succ       5
	rli        %a0
	rli        %r0
	sll        %r1, %a0, 2
	mov        %r2, HTable
	mloc       4
	lw         %r1, %r2, %r1
	mloc       5
	lb         %r1, %r1, %r0
$BB20_5:                                # %return
	bb         5
	pred       4
	pred       3
	pdom       4
	pdom       3
	rli        %r1
	and        %v0, %r1, 255
	ret        %RA
	.end       get_symbol
$tmp20:
	.size	get_symbol, ($tmp20)-get_symbol

	.globl	suicide
	.align	2
	.type	suicide,@function
	.ent       suicide              # @suicide
suicide:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       0
	bb         0
	call       abort
	ret        %RA
	.end       suicide
$tmp21:
	.size	suicide, ($tmp21)-suicide

	.globl	aborted_stream
	.align	2
	.type	aborted_stream,@function
	.ent       aborted_stream       # @aborted_stream
aborted_stream:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       0
	bb         0
	call       abort
	ret        %RA
	.end       aborted_stream
$tmp22:
	.size	aborted_stream, ($tmp22)-aborted_stream

	.globl	ceil_div
	.align	2
	.type	ceil_div,@function
	.ent       ceil_div             # @ceil_div
ceil_div:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       2
	rvals      32
	bb         0
	rli        %a1
	rli        %a0
	call       __divsi3
	mul        %r0, %v0, %a1
	sel_ge     %r0, %r0, %a0, %ZERO, 1
	add        %v0, %r0, %v0
	ret        %RA
	.end       ceil_div
$tmp23:
	.size	ceil_div, ($tmp23)-ceil_div

	.globl	floor_div
	.align	2
	.type	floor_div,@function
	.ent       floor_div            # @floor_div
floor_div:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       2
	rvals      32
	bb         0
	rli        %a1
	rli        %a0
	call       __divsi3
	mul        %r0, %v0, %a1
	sel_le     %r0, %r0, %a0, %ZERO, 1
	sub       %v0, %v0, %r0
	ret        %RA
	.end       floor_div
$tmp24:
	.size	floor_div, ($tmp24)-floor_div

	.globl	reset_prediction
	.align	2
	.type	reset_prediction,@function
	.ent       reset_prediction     # @reset_prediction
reset_prediction:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       0
	mnum       3
	bb         0
	mov        %r0, comp
	mloc       1
	sw         %ZERO, %r0, 12
	mloc       2
	sw         %ZERO, %r0, 28
	mloc       3
	sw         %ZERO, %r0, 44
	ret        %RA
	.end       reset_prediction
$tmp25:
	.size	reset_prediction, ($tmp25)-reset_prediction

	.globl	reformat
	.align	2
	.type	reformat,@function
	.ent       reformat             # @reformat
reformat:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       2
	rvals      32
	bb         0
	succ       1
	succ       4
	dom        1
	dom        4
	rli        %a1
	rli        %a0
	breq       %a1, 0, ($BB26_4)
# BB#1:                                 # %if.end
	bb         1
	pred       0
	succ       3
	succ       2
	dom        3
	dom        2
	rli        %a0
	rli        %a1
	add        %r0, %a1, -1
	mov        %r1, 1
	sll        %r0, %r1, %r0
	brleu      %r0, %a0, ($BB26_3)
	j          ($BB26_2)
$BB26_2:                                # %if.then1
	bb         2
	pred       1
	succ       3
	rli        %a0
	rli        %a1
	mov        %r0, -1
	sll        %r0, %r0, %a1
	add        %r0, %a0, %r0
	add        %a0, %r0, 1
$BB26_3:                                # %return
	bb         3
	pred       2
	pred       1
	pdom       2
	pdom       1
	rli        %a0
	mov        %v0, %a0
	ret        %RA
$BB26_4:
	bb         4
	pred       0
	mov        %a0, %ZERO
	mov        %v0, %a0
	ret        %RA
	.end       reformat
$tmp26:
	.size	reformat, ($tmp26)-reformat

	.globl	free_structures
	.align	2
	.type	free_structures,@function
	.ent       free_structures      # @free_structures
free_structures:
	.frame     %SP,0
# BB#0:                                 # %entry
	args       0
	bb         0
	ret        %RA
	.end       free_structures
$tmp27:
	.size	free_structures, ($tmp27)-free_structures

	.type	vld_count,@object       # @vld_count
	.comm	vld_count,4,4
	.type	input_buffer,@object    # @input_buffer
	.comm	input_buffer,16384,4
	.type	G_ZZ,@object            # @G_ZZ
	.section	.rodata,"a",@progbits
	.align	2
G_ZZ:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	16                      # 0x10
	.long	9                       # 0x9
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	10                      # 0xa
	.long	17                      # 0x11
	.long	24                      # 0x18
	.long	32                      # 0x20
	.long	25                      # 0x19
	.long	18                      # 0x12
	.long	11                      # 0xb
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	12                      # 0xc
	.long	19                      # 0x13
	.long	26                      # 0x1a
	.long	33                      # 0x21
	.long	40                      # 0x28
	.long	48                      # 0x30
	.long	41                      # 0x29
	.long	34                      # 0x22
	.long	27                      # 0x1b
	.long	20                      # 0x14
	.long	13                      # 0xd
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	14                      # 0xe
	.long	21                      # 0x15
	.long	28                      # 0x1c
	.long	35                      # 0x23
	.long	42                      # 0x2a
	.long	49                      # 0x31
	.long	56                      # 0x38
	.long	57                      # 0x39
	.long	50                      # 0x32
	.long	43                      # 0x2b
	.long	36                      # 0x24
	.long	29                      # 0x1d
	.long	22                      # 0x16
	.long	15                      # 0xf
	.long	23                      # 0x17
	.long	30                      # 0x1e
	.long	37                      # 0x25
	.long	44                      # 0x2c
	.long	51                      # 0x33
	.long	58                      # 0x3a
	.long	59                      # 0x3b
	.long	52                      # 0x34
	.long	45                      # 0x2d
	.long	38                      # 0x26
	.long	31                      # 0x1f
	.long	39                      # 0x27
	.long	46                      # 0x2e
	.long	53                      # 0x35
	.long	60                      # 0x3c
	.long	61                      # 0x3d
	.long	54                      # 0x36
	.long	47                      # 0x2f
	.long	55                      # 0x37
	.long	62                      # 0x3e
	.long	63                      # 0x3f
	.size	G_ZZ, 256

	.type	stuffers,@object        # @stuffers
	.bss
	.globl	stuffers
	.align	2
stuffers:
	.long	0                       # 0x0
	.size	stuffers, 4

	.type	passed,@object          # @passed
	.globl	passed
	.align	2
passed:
	.long	0                       # 0x0
	.size	passed, 4

	.type	$.str,@object           # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
$.str:
	.ascii	 "surfer.jpg\000"
	.size	$.str, 11

	.type	$.str1,@object          # @.str1
$.str1:
	.ascii	 "rb\000"
	.size	$.str1, 3

	.type	in_frame,@object        # @in_frame
	.comm	in_frame,4,4
	.type	QTvalid,@object         # @QTvalid
	.comm	QTvalid,16,4
	.type	y_size,@object          # @y_size
	.comm	y_size,4,4
	.type	x_size,@object          # @x_size
	.comm	x_size,4,4
	.type	n_comp,@object          # @n_comp
	.comm	n_comp,4,4
	.type	comp,@object            # @comp
	.comm	comp,48,4
	.type	MCU_sx,@object          # @MCU_sx
	.comm	MCU_sx,4,4
	.type	MCU_sy,@object          # @MCU_sy
	.comm	MCU_sy,4,4
	.type	ColorBuffer,@object     # @ColorBuffer
	.comm	ColorBuffer,4,4
	.type	FBuff,@object           # @FBuff
	.comm	FBuff,4,4
	.type	PBuff,@object           # @PBuff
	.comm	PBuff,4,4
	.type	MCU_column,@object      # @MCU_column
	.comm	MCU_column,4,4
	.type	MCU_row,@object         # @MCU_row
	.comm	MCU_row,4,4
	.type	mx_size,@object         # @mx_size
	.comm	mx_size,4,4
	.type	my_size,@object         # @my_size
	.comm	my_size,4,4
	.type	MCU_buff,@object        # @MCU_buff
	.comm	MCU_buff,40,4
	.type	MCU_valid,@object       # @MCU_valid
	.comm	MCU_valid,40,4
	.type	QTable,@object          # @QTable
	.comm	QTable,16,4
	.type	rx_size,@object         # @rx_size
	.comm	rx_size,4,4
	.type	ry_size,@object         # @ry_size
	.comm	ry_size,4,4
	.type	FrameBuffer,@object     # @FrameBuffer
	.comm	FrameBuffer,2304,1
	.type	curcomp,@object         # @curcomp
	.comm	curcomp,4,4
	.type	bit_count,@object       # @bit_count
	.local	bit_count
	.comm	bit_count,1,1
	.type	window,@object          # @window
	.local	window
	.comm	window,1,1
	.type	ValPtr,@object          # @ValPtr
	.local	ValPtr
	.comm	ValPtr,256,4
	.type	MinCode,@object         # @MinCode
	.local	MinCode
	.comm	MinCode,256,4
	.type	MaxCode,@object         # @MaxCode
	.local	MaxCode
	.comm	MaxCode,256,4
	.type	HTable,@object          # @HTable
	.section	.rodata,"a",@progbits
	.align	2
HTable:
	.long	DC_Table0
	.long	DC_Table1
	.long	AC_Table0
	.long	AC_Table1
	.size	HTable, 16

	.type	DC_Table0,@object       # @DC_Table0
	.local	DC_Table0
	.comm	DC_Table0,14,1
	.type	DC_Table1,@object       # @DC_Table1
	.local	DC_Table1
	.comm	DC_Table1,14,1
	.type	AC_Table0,@object       # @AC_Table0
	.local	AC_Table0
	.comm	AC_Table0,162,1
	.type	AC_Table1,@object       # @AC_Table1
	.local	AC_Table1
	.comm	AC_Table1,162,1

